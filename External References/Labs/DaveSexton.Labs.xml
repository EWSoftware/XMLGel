<?xml version="1.0"?>
<doc>
  <assembly>
    <name>DaveSexton.Labs</name>
  </assembly>
  <members>
    <member name="T:DaveSexton.Labs.AnonymousExperiment">
      <summary>
            Represents an experiment implemented by a delegate.
            </summary>
      <invariant>!string.IsNullOrWhiteSpace(displayName)</invariant>
      <invariant>description != null</invariant>
      <invariant>(execute == null) != (executeAsync == null)</invariant>
    </member>
    <member name="T:DaveSexton.Labs.IExperiment">
      <summary>
            Represents an individual experiment.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.IExperiment.ExecuteAsync">
      <summary>
            Asynchronously executes the experiment.
            </summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronously executing experiment.</returns>
    </member>
    <member name="P:DaveSexton.Labs.IExperiment.DisplayName">
      <summary>
            Gets the name of the experiment.
            </summary>
      <getter>
        <ensures csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.IExperiment.Description">
      <summary>
            Gets a brief textual description of the experiment.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousExperiment.#ctor(System.Action)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousExperiment" /> class.
            </summary>
      <requires csharp="execute != null" vb="execute &lt;&gt; Nothing">execute != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousExperiment.#ctor(System.Func{System.Threading.Tasks.Task})">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousExperiment" /> class.
            </summary>
      <requires csharp="executeAsync != null" vb="executeAsync &lt;&gt; Nothing">executeAsync != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousExperiment.#ctor(System.String,System.Action)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousExperiment" /> class.
            </summary>
      <requires csharp="!IsNullOrWhiteSpace(displayName)" vb="Not IsNullOrWhiteSpace(displayName)">!string.IsNullOrWhiteSpace(displayName)</requires>
      <requires csharp="execute != null" vb="execute &lt;&gt; Nothing">execute != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousExperiment.#ctor(System.String,System.Func{System.Threading.Tasks.Task})">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousExperiment" /> class.
            </summary>
      <requires csharp="!IsNullOrWhiteSpace(displayName)" vb="Not IsNullOrWhiteSpace(displayName)">!string.IsNullOrWhiteSpace(displayName)</requires>
      <requires csharp="executeAsync != null" vb="executeAsync &lt;&gt; Nothing">executeAsync != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousExperiment.#ctor(System.String,System.String,System.Action)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousExperiment" /> class.
            </summary>
      <requires csharp="!IsNullOrWhiteSpace(displayName)" vb="Not IsNullOrWhiteSpace(displayName)">!string.IsNullOrWhiteSpace(displayName)</requires>
      <requires csharp="description != null" vb="description &lt;&gt; Nothing">description != null</requires>
      <requires csharp="execute != null" vb="execute &lt;&gt; Nothing">execute != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousExperiment.#ctor(System.String,System.String,System.Func{System.Threading.Tasks.Task})">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousExperiment" /> class.
            </summary>
      <requires csharp="!IsNullOrWhiteSpace(displayName)" vb="Not IsNullOrWhiteSpace(displayName)">!string.IsNullOrWhiteSpace(displayName)</requires>
      <requires csharp="description != null" vb="description &lt;&gt; Nothing">description != null</requires>
      <requires csharp="executeAsync != null" vb="executeAsync &lt;&gt; Nothing">executeAsync != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousExperiment.ExecuteAsync">
      <inheritdoc />
    </member>
    <member name="P:DaveSexton.Labs.AnonymousExperiment.DisplayName">
      <inheritdoc />
      <getter>
        <ensures inheritedFrom="M:DaveSexton.Labs.IExperiment.get_DisplayName" inheritedFromTypeName="IExperiment" csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.AnonymousExperiment.Description">
      <inheritdoc />
      <getter>
        <ensures inheritedFrom="M:DaveSexton.Labs.IExperiment.get_Description" inheritedFromTypeName="IExperiment" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.AnonymousLab">
      <summary>
            Dynamic <see cref="T:DaveSexton.Labs.Lab" /> that accepts an <see cref="T:System.Action" /> delegate for the 
            <see cref="M:DaveSexton.Labs.Lab.Main" /> method, without requiring an explicit class to be defined.
            </summary>
      <invariant>!IsProxy</invariant>
      <invariant>main != null</invariant>
      <invariant>experiments == null || experiments.IsReadOnly</invariant>
    </member>
    <member name="T:DaveSexton.Labs.Lab">
      <summary>
            Provides an entry point for running experiments in a controlled environment, for performing
            public integration and regression testing, and for encapsulating working examples that can
            serve as executable documentation.
            </summary>
      <remarks>
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="type[@id=&quot;Lab&quot;]/remarks[@kind=&quot;intro&quot;]/*" />
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="property[@id=&quot;DisplayName&quot;]/*" />
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="property[@id=&quot;Description&quot;]/*" />
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="property[@id=&quot;Categories&quot;]/*" />
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="type[@id=&quot;Lab&quot;]/remarks[@kind=&quot;remainder&quot;]/*" />
      </remarks>
      <invariant>registeredTasks != null</invariant>
      <invariant>listener != null</invariant>
      <invariant>actualLab != null</invariant>
      <invariant>!string.IsNullOrWhiteSpace(displayName)</invariant>
      <invariant>description != null</invariant>
      <invariant>categories != null</invariant>
      <invariant>categories.IsReadOnly</invariant>
      <invariant>virtualExperiments != null</invariant>
      <invariant>!((ILab)this).HasProxy</invariant>
      <invariant>IsProxy || overriddenExperiments == null</invariant>
      <invariant>overriddenExperiments == null || overriddenExperiments.IsReadOnly</invariant>
    </member>
    <member name="T:DaveSexton.Labs.LabTraceSource">
      <summary>
            Represents a <see cref="T:System.Diagnostics.TraceSource" /> for a <see cref="T:DaveSexton.Labs.Lab" />.
            </summary>
      <invariant>watch != null</invariant>
    </member>
    <member name="F:DaveSexton.Labs.LabTraceSource.Default">
      <summary>
            The default singleton <see cref="T:DaveSexton.Labs.LabTraceSource" />.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.#ctor(System.String)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.LabTraceSource" /> class for derived classes.
            </summary>
      <requires csharp="!IsNullOrEmpty(name)" vb="Not IsNullOrEmpty(name)">!string.IsNullOrEmpty(name)</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.LabTraceSource" /> class for derived classes.
            </summary>
      <requires csharp="!IsNullOrEmpty(name)" vb="Not IsNullOrEmpty(name)">!string.IsNullOrEmpty(name)</requires>
      <requires csharp="IsDefined(typeof(System.Diagnostics.SourceLevels), (object)defaultLevel)" vb="IsDefined(typeof(System.Diagnostics.SourceLevels), ((Object)defaultLevel))">System.Enum.IsDefined(typeof(System.Diagnostics.SourceLevels), (object)defaultLevel)</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.Format(System.String,System.Object[])">
      <summary>
            Formats the specified <paramref name="message" /> with the specified <paramref name="args" />.
            </summary>
      <param name="message">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <returns>A formatted <paramref name="message" /> with the specified <paramref name="args" />.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.Trace(System.String,System.Object[])">
      <summary>
            Sends the specified message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.Trace(System.Object)">
      <summary>
            Sends the specified <paramref name="value" /> to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="value">The object to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.Trace(System.String)">
      <summary>
            Sends the specified message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="message">The message to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceLine">
      <summary>
            Sends a new line to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceLine(System.String,System.Object[])">
      <summary>
            Sends the specified message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" /> and starts a new line.
            </summary>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceLine(System.Object)">
      <summary>
            Sends the specified <paramref name="value" /> to all <see cref="P:System.Diagnostics.TraceSource.Listeners" /> and starts a new line.
            </summary>
      <param name="value">The object to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceLine(System.String)">
      <summary>
            Sends the specified message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" /> and starts a new line.
            </summary>
      <param name="message">The message to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceDescription(System.String)">
      <summary>
            Sends the specified description to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="description">The message to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceSuccess(System.String,System.Object[])">
      <summary>
            Sends the specified success message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceSuccess(System.String)">
      <summary>
            Sends the specified success message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="message">The message to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceSuccess">
      <summary>
            Sends a success message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceFailure(System.String,System.Object[])">
      <summary>
            Sends the specified failure message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceFailure(System.String)">
      <summary>
            Sends the specified failure message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="message">The message to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceFailure">
      <summary>
            Sends a failure message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceStatus(System.String,System.Object[])">
      <summary>
            Sends the specified status message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceStatus(System.String)">
      <summary>
            Sends the specified status message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="message">The message to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceTitle(System.String,System.Object[])">
      <summary>
            Sends the specified title message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceTitle(System.String)">
      <summary>
            Sends the specified title message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="message">The message to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.String,System.Object[])">
      <summary>
            Sends the specified event message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="eventType">The type of the event.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.String)">
      <summary>
            Sends the specified event message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="eventType">The type of the event.</param>
      <param name="message">The message to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceError(System.Exception)">
      <summary>
            Sends the specified <paramref name="exception" /> to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="exception">The <see cref="T:System.Exception" /> to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceError(System.Func{System.String})">
      <summary>
            When error tracing is enabled, invokes the specified <paramref name="message" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceError(System.String)">
      <summary>
            Sends the specified error message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="message">The message to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceError(System.String,System.Object[])">
      <summary>
            Sends the specified error message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceWarning(System.Func{System.String})">
      <summary>
            When warning tracing is enabled, invokes the specified <paramref name="message" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceWarning(System.String)">
      <summary>
            Sends the specified warning message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="message">The message to be sent.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceWarning(System.String,System.Object[])">
      <summary>
            Sends the specified warning message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceInformation(System.Func{System.String})">
      <summary>
            When information tracing is enabled, invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceTime(System.String,System.Object[])">
      <summary>
            Sends the specified message to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
      <param name="format">The message to be formatted.  The current time is passed as the first format argument, referenced by <strong>{0}</strong>.</param>
      <param name="additionalArgs">Any additional format arguments, referenced in order by <strong>{1}, {2}, {3},...</strong>.</param>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.TraceTime">
      <summary>
            Sends the current time to all <see cref="P:System.Diagnostics.TraceSource.Listeners" />.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceSource.ResetTime">
      <summary>
            Restarts the timer used by <see cref="M:DaveSexton.Labs.LabTraceSource.TraceTime" /> and <see cref="M:DaveSexton.Labs.LabTraceSource.TraceTime(System.String,System.Object[])" />.
            </summary>
    </member>
    <member name="T:DaveSexton.Labs.ILab">
      <summary>
            Provides an entry point for running experiments in a controlled environment, for performing
            public integration and regression testing, and for encapsulating working examples that can
            serve as executable documentation.
            </summary>
      <remarks>
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="type[@id=&quot;Lab&quot;]/remarks[@kind=&quot;intro&quot;]/*" />
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="property[@id=&quot;DisplayName&quot;]/*" />
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="property[@id=&quot;Description&quot;]/*" />
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="property[@id=&quot;Categories&quot;]/*" />
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="type[@id=&quot;Lab&quot;]/remarks[@kind=&quot;remainder&quot;]/*" />
      </remarks>
    </member>
    <member name="M:DaveSexton.Labs.ILab.FormatSourceCode(System.String)">
      <summary>
            Formats the specified source code or returns <see langword="null" /> to indicate that the default 
            formatting should be used.
            </summary>
      <remarks>
        <see cref="M:DaveSexton.Labs.ILab.FormatSourceCode(System.String)" /> provides <see cref="T:DaveSexton.Labs.ILab" /> implementors an opportunity to 
            perform a one-time formatting on the source code that is retrieved from a resource file 
            when <see cref="P:DaveSexton.Labs.ILab.SourceCode" /> returns <see langword="null" />.  For example, you can replace
            all TAB characters with a fixed number of spaces.  To use the default formatting behavior, 
            return <see langword="null" />.
            </remarks>
      <param name="source">The source code to be formatted.</param>
      <returns>Formatted source code or <see langword="null" />.</returns>
      <requires csharp="!IsNullOrEmpty(source)" vb="Not IsNullOrEmpty(source)">!string.IsNullOrEmpty(source)</requires>
    </member>
    <member name="M:DaveSexton.Labs.ILab.FormatSourceXaml(System.String)">
      <summary>
            Formats the specified XAML or returns <see langword="null" /> to indicate that the default 
            formatting should be used.
            </summary>
      <remarks>
        <see cref="M:DaveSexton.Labs.ILab.FormatSourceCode(System.String)" /> provides <see cref="T:DaveSexton.Labs.ILab" /> implementors an opportunity to 
            perform a one-time formatting on the source code that is retrieved from the resource file 
            when <see cref="P:DaveSexton.Labs.ILab.SourceCode" /> returns <see langword="null" />.  For example, you can replace
            all TAB characters with a fixed number of spaces.  To use the default formatting behavior, 
            return <see langword="null" />.
            </remarks>
      <param name="source">The XAML to be formatted.</param>
      <returns>Formatted XAML or <see langword="null" />.</returns>
      <requires csharp="!IsNullOrEmpty(source)" vb="Not IsNullOrEmpty(source)">!string.IsNullOrEmpty(source)</requires>
    </member>
    <member name="P:DaveSexton.Labs.ILab.IsEnabled">
      <summary>
            Gets or sets whether the lab should be included when it's discovered by a <see cref="T:DaveSexton.Labs.LabController" />.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.ILab.SourceCode">
      <summary>
            Gets the lab's source code.
            </summary>
      <remarks>
        <alert type="note">
            When implementing <see cref="P:DaveSexton.Labs.ILab.SourceCode" /> in classes that do not derive from <see cref="T:DaveSexton.Labs.Lab" />, returning 
            <see langword="null" /> indicates to the infrastructure that the source code embedded in the library as a 
            resource via the <strong>Labs.targets</strong> file, if any, should be loaded into the <see cref="P:DaveSexton.Labs.ILab.Proxy" />
            when this lab is loaded.
            </alert>
      </remarks>
      <value>The lab's source code or <see langword="null" /> to have it automatically loaded from an embedded resource file.</value>
    </member>
    <member name="P:DaveSexton.Labs.ILab.SourceXaml">
      <summary>
            Gets the lab's source XAML.
            </summary>
      <remarks>
        <alert type="note">
            When implementing <see cref="P:DaveSexton.Labs.ILab.SourceXaml" /> in classes that do not derive from <see cref="T:DaveSexton.Labs.Lab" />, returning 
            <see langword="null" /> indicates to the infrastructure that the source XAML embedded in the library as a 
            resource via the <strong>Labs.targets</strong> file, if any, should be loaded into the <see cref="P:DaveSexton.Labs.ILab.Proxy" />
            when this lab is loaded.
            </alert>
      </remarks>
      <value>The lab's source XAML or <see langword="null" /> to have it automatically loaded from an embedded resource file.</value>
    </member>
    <member name="P:DaveSexton.Labs.ILab.Proxy">
      <summary>
            Gets or sets the <see cref="T:DaveSexton.Labs.Lab" /> object that provides services for an <see cref="T:DaveSexton.Labs.ILab" /> instance.
            </summary>
      <remarks>
        <para>
            The <see cref="P:DaveSexton.Labs.ILab.Proxy" /> property is used as a workaround to the lack of support in C# for multiple inheritance 
            from base classes.  Multiple inheritance is required for special lab types such as WindowsLab, 
            which already derives from the <see cref="T:System.Windows.Controls.UserControl" /> class.  It cannot also derive 
            from <see cref="T:DaveSexton.Labs.Lab" />, so the <see cref="P:DaveSexton.Labs.ILab.Proxy" /> is assigned to an instance of an internal type 
            that derives from <see cref="T:DaveSexton.Labs.Lab" />, which provides services to labs such as a 
            <see cref="T:System.Diagnostics.TraceSource" /> implementation, the retrieval of information about the lab 
            from reflection, and category aggregation.  Custom types that implement <see cref="T:DaveSexton.Labs.ILab" /> do not have 
            to implement these services since they can just delegate the work to the <see cref="P:DaveSexton.Labs.ILab.Proxy" />, which is 
            automatically assigned by the <see cref="T:DaveSexton.Labs.LabController" /> when the <see cref="T:DaveSexton.Labs.Lab" /> is first loaded.
            </para>
        <alert type="note">
            An instance of <see cref="T:DaveSexton.Labs.Lab" /> returns a reference to itself from the <see cref="P:DaveSexton.Labs.ILab.Proxy" /> property.  It also 
            prevents assignments by throwing an exception.
            </alert>
      </remarks>
      <getter>
        <ensures csharp="result == default(DaveSexton.Labs.Lab) || result.ActualLab == this" vb="result = Nothing OrElse result.ActualLab = Me">result == default(DaveSexton.Labs.Lab) || result.ActualLab == this</ensures>
      </getter>
      <setter>
        <requires csharp="!this.HasProxy" vb="Not Me.HasProxy">!this.HasProxy</requires>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
        <requires csharp="value.IsProxy" vb="value.IsProxy">value.IsProxy</requires>
        <requires csharp="value.ActualLab == this" vb="value.ActualLab = Me">value.ActualLab == this</requires>
      </setter>
    </member>
    <member name="P:DaveSexton.Labs.ILab.HasProxy">
      <summary>
            Gets a value indicating whether <see cref="P:DaveSexton.Labs.ILab.Proxy" /> returns an object or <see langword="null" />.
            </summary>
      <getter>
        <ensures csharp="result == this.Proxy != null" vb="result = Me.Proxy &lt;&gt; Nothing">result == this.Proxy != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.ILab.IsProxy">
      <summary>
            Gets whether the lab is a proxy for <see cref="P:DaveSexton.Labs.ILab.ActualLab" />.
            </summary>
      <getter>
        <ensures csharp="result == this.ActualLab != this" vb="result = Me.ActualLab &lt;&gt; Me">result == this.ActualLab != this</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.ILab.ActualLab">
      <summary>
            Gets the actual <see cref="T:DaveSexton.Labs.ILab" /> instance that this object represents.
            </summary>
      <remarks>
            The <see cref="P:DaveSexton.Labs.ILab.ActualLab" /> property is useful for UI labs that derive from a control base
            and implement <see cref="T:DaveSexton.Labs.ILab" />.  Since the <see cref="T:DaveSexton.Labs.Lab" /> class doesn't derive from 
            the control base, the UI lab host must be able to retrieve a reference to the underlying 
            <see cref="T:DaveSexton.Labs.ILab" /> instance.
            </remarks>
      <value>If <see cref="P:DaveSexton.Labs.ILab.IsProxy" /> is <see langword="true" />, then a reference to a different instance of <see cref="T:DaveSexton.Labs.ILab" /> is returned; 
            otherwise, a reference to this object is returned.</value>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:DaveSexton.Labs.Lab.#ctor">
      <summary>
            Constructs a new instance of <see cref="T:DaveSexton.Labs.Lab" /> for derived classes.
            </summary>
      <ensures csharp="!this.IsProxy" vb="Not Me.IsProxy">!this.IsProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.#ctor(System.Boolean)">
      <summary>
            Constructs a new instance of <see cref="T:DaveSexton.Labs.Lab" /> for derived classes.
            </summary>
      <param name="enabled">Indicates whether the lab is enabled by default and assigns <see cref="P:DaveSexton.Labs.Lab.IsEnabled" />.</param>
      <ensures csharp="!this.IsProxy" vb="Not Me.IsProxy">!this.IsProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.#ctor(System.String)">
      <summary>
            Constructs a new instance of <see cref="T:DaveSexton.Labs.Lab" /> for derived classes.
            </summary>
      <param name="name">The name of the lab.</param>
      <requires csharp="!IsNullOrWhiteSpace(name)" vb="Not IsNullOrWhiteSpace(name)">!string.IsNullOrWhiteSpace(name)</requires>
      <ensures csharp="!this.IsProxy" vb="Not Me.IsProxy">!this.IsProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs a new instance of <see cref="T:DaveSexton.Labs.Lab" /> for derived classes.
            </summary>
      <param name="name">The name of the lab.</param>
      <param name="enabled">Indicates whether the lab is enabled by default and assigns <see cref="P:DaveSexton.Labs.Lab.IsEnabled" />.</param>
      <requires csharp="!IsNullOrWhiteSpace(name)" vb="Not IsNullOrWhiteSpace(name)">!string.IsNullOrWhiteSpace(name)</requires>
      <ensures csharp="!this.IsProxy" vb="Not Me.IsProxy">!this.IsProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.EnsureUIThreadAccessAsync">
      <summary>
            Asynchronously ensures that execution continues on the UI thread.
            </summary>
      <returns />
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.FormatSourceCode(System.String)">
      <summary>
            Formats the specified <paramref name="source" /> code for display.
            </summary>
      <param name="source">The source code to be formatted.</param>
      <returns>The formatted <paramref name="source" /> code.</returns>
      <requires inheritedFrom="M:DaveSexton.Labs.ILab.FormatSourceCode(System.String)" inheritedFromTypeName="ILab" csharp="!IsNullOrEmpty(source)" vb="Not IsNullOrEmpty(source)">!string.IsNullOrEmpty(source)</requires>
    </member>
    <member name="M:DaveSexton.Labs.Lab.FormatSourceXaml(System.String)">
      <summary>
            Formats the specified <paramref name="source" /> XAML for display.
            </summary>
      <param name="source">The source XAML to be formatted.</param>
      <returns>The formatted <paramref name="source" /> XAML.</returns>
      <requires inheritedFrom="M:DaveSexton.Labs.ILab.FormatSourceXaml(System.String)" inheritedFromTypeName="ILab" csharp="!IsNullOrEmpty(source)" vb="Not IsNullOrEmpty(source)">!string.IsNullOrEmpty(source)</requires>
    </member>
    <member name="M:DaveSexton.Labs.Lab.CanExecute">
      <summary>
            Gets whether the <see cref="T:DaveSexton.Labs.LabController" /> should call <see cref="M:DaveSexton.Labs.Lab.Main" />
            when the <see cref="T:DaveSexton.Labs.Lab" /> is next in the queue to be executed.
            If <see cref="M:DaveSexton.Labs.Lab.CanExecute" /> returns <see langword="false" />, then the 
            <see cref="T:DaveSexton.Labs.Lab" /> is skipped.
            </summary>
      <remarks>
            Derived classes can override <see cref="M:DaveSexton.Labs.Lab.CanExecute" /> to include custom logic
            that determines whether the <see cref="T:DaveSexton.Labs.Lab" /> should be skipped at runtime.
            </remarks>
      <returns>
            Returns <see langword="true" /> if <see cref="P:DaveSexton.Labs.Lab.IsEnabled" /> is <see langword="true" />
            and <see langword="false" /> otherwise.
            </returns>
      <pure />
    </member>
    <member name="M:DaveSexton.Labs.Lab.RegisterMainTask(System.Threading.Tasks.Task)">
      <summary>
            Registers the specified <paramref name="task" /> as the main task.
            </summary>
      <param name="task">The task to be registered.</param>
      <requires csharp="task != null" vb="task &lt;&gt; Nothing">task != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.Lab.WhenMainCompletesAsync">
      <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task" /> that asynchronously completes when the <see cref="M:DaveSexton.Labs.Lab.Main" /> method completes.
            </summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that asynchronously completes when the <see cref="M:DaveSexton.Labs.Lab.Main" /> method completes</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.Main">
      <summary>
            The entry point of the <see cref="T:DaveSexton.Labs.Lab" />, which is called automatically 
            by the <see cref="T:DaveSexton.Labs.LabController" /> if <see cref="M:DaveSexton.Labs.Lab.CanExecute" /> returns
            <see langword="true" />.
            </summary>
      <remarks>
        <alert type="implement">
            When implemented by a derived class, <see cref="M:DaveSexton.Labs.Lab.Main" /> must block the 
            current thread until the <see cref="T:DaveSexton.Labs.Lab" /> has completed.  Asynchronous labs 
            are not currently supported.  By returning from <see cref="M:DaveSexton.Labs.Lab.Main" />, the 
            <see cref="T:DaveSexton.Labs.Lab" /> indicates to the <see cref="T:DaveSexton.Labs.LabController" /> that it has 
            completed and the next <see cref="T:DaveSexton.Labs.Lab" />, if any, can be started.
            </alert>
      </remarks>
      <requires csharp="this.CanExecute()" vb="Me.CanExecute()">this.CanExecute()</requires>
    </member>
    <member name="M:DaveSexton.Labs.Lab.RunExperiments">
      <summary>
            Sequentially executes the lab's experiments asynchronously.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.Lab.RunExperimentsAsync">
      <summary>
            Sequentially executes the lab's experiments asynchronously.
            </summary>
      <returns />
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.TraceExperimentHeader(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32,System.String)">
      <summary>
            Traces information about the next experiment to be executed from the specified list of <paramref name="experiments" />.
            </summary>
      <param name="experiments">The list of experiments from which the next experiment will be executed.</param>
      <param name="index">The index of the experiment in the <paramref name="experiments" /> list that is the next to be executed.</param>
      <param name="additionalInfo">Any additional information to be traced.</param>
      <requires csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <summary>
            Called before an experiment begins executing and asynchronously returns a value indicating whether the experiment may be executed or skipped.
            </summary>
      <param name="experiments">The list of experiments from which the next experiment will be executed.</param>
      <param name="index">The index of the experiment in the <paramref name="experiments" /> list that is the next to be executed.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that eventually completes with a value of <see langword="true" /> to indicate that the experiment may be executed; otherwise, <see langword="false" /> to indicate that the experiment must be skipped.</returns>
      <requires csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <summary>
            Asynchronously executes the experiment at the specified <paramref name="index" />.
            </summary>
      <param name="experiments">The list of experiments from which the next experiment will be executed.</param>
      <param name="index">The index of the experiment in the <paramref name="experiments" /> list that is the next to be executed.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous state of the experiment being executed.</returns>
    </member>
    <member name="M:DaveSexton.Labs.Lab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <summary>
            Called after an experiment has executed.
            </summary>
      <param name="experiments">The list of experiments from which the experiment at the specified <paramref name="index" /> was executed.</param>
      <param name="index">The index of the experiment in the <paramref name="experiments" /> list that was executed.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <requires csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
    </member>
    <member name="P:DaveSexton.Labs.Lab.DisplayName">
      <summary>
            Gets the name of the <see cref="T:DaveSexton.Labs.Lab" />.
            </summary>
      <remarks>
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="property[@id=&quot;DisplayName&quot;]/*" />
      </remarks>
      <getter>
        <ensures csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.OrganizedName">
      <summary>
            Gets a <see cref="T:System.String" /> containing the <see cref="P:DaveSexton.Labs.LabCategory.OrganizedName" /> and the lab's <see cref="P:DaveSexton.Labs.Lab.DisplayName" />, 
            or just the <see cref="P:DaveSexton.Labs.Lab.DisplayName" /> if the lab has not been processed by <see cref="M:DaveSexton.Labs.LabCategory.Organize(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" />.
            </summary>
      <remarks>
            Unlike the <see cref="P:DaveSexton.Labs.Lab.FullCategory" /> property, <see cref="P:DaveSexton.Labs.Lab.OrganizedName" /> excludes all parent categories that are shared 
            by all of the labs.  For example, if you have the following three labs: 
            <list type="bullet"><item>MyProject.TestLabs.Lab1</item><item>MyProject.TestLabs.Fun.Lab2</item><item>MyProject.TestLabs.Fun.Lab3</item><item>MyProject.TestLabs.Boring.Lab4</item></list>
            then the <see cref="P:DaveSexton.Labs.Lab.OrganizedName" /> of each will be, respectively: 
            <list type="bullet"><item>Lab1</item><item>Fun / Lab2</item><item>Fun / Lab3</item><item>Boring / Lab4</item></list></remarks>
      <getter>
        <ensures csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.FullName">
      <summary>
            Gets a <see cref="T:System.String" /> containing the <see cref="P:DaveSexton.Labs.Lab.FullCategory" /> and <see cref="P:DaveSexton.Labs.Lab.DisplayName" /> of the lab.
            </summary>
      <getter>
        <ensures csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.Description">
      <summary>
            Gets a brief textual description of the <see cref="T:DaveSexton.Labs.Lab" />.
            </summary>
      <remarks>
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="property[@id=&quot;Description&quot;]/*" />
      </remarks>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.Category">
      <summary>
            Gets the <see cref="T:DaveSexton.Labs.LabCategory" /> associated by <see cref="M:DaveSexton.Labs.LabCategory.Organize(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" />, or an empty category if 
            this lab has not been processed by <see cref="M:DaveSexton.Labs.LabCategory.Organize(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" />.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Lab.Categories">
      <summary>
            Gets the categories in which this <see cref="T:DaveSexton.Labs.Lab" /> is defined.
            </summary>
      <remarks>
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="property[@id=&quot;Categories&quot;]/*" />
      </remarks>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures csharp="result.IsReadOnly" vb="result.IsReadOnly">result.IsReadOnly</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.FullCategory">
      <summary>
            Gets a concatenated list of categories in which this <see cref="T:DaveSexton.Labs.Lab" /> is defined.
            </summary>
      <remarks>
        <!-- No matching elements were found for the following include tag -->
        <include file="Lab.xml" path="property[@id=&quot;Categories&quot;]/*" />
      </remarks>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.IsCancellable">
      <summary>
            Gets whether the <see cref="T:DaveSexton.Labs.Lab" /> may be cancelled.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Lab.IsEnabled">
      <summary>
            Gets or sets whether the lab should be included when it's discovered by a <see cref="T:DaveSexton.Labs.LabController" />.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Lab.PauseOnCompletion">
      <summary>
            Gets or sets whether the <see cref="T:DaveSexton.Labs.LabController" /> should pause for user 
            input after the <see cref="T:DaveSexton.Labs.Lab" /> completes, but only when it's not the final 
            <see cref="T:DaveSexton.Labs.Lab" /> to be executed.  The default value is <see langword="false" />.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Lab.DaveSexton#Labs#ILab#HasProxy">
      <summary>
            This property is not intended to be used directly on a <see cref="T:DaveSexton.Labs.Lab" /> instance.
            </summary>
      <getter>
        <ensures csharp="!result" vb="Not result">!result</ensures>
        <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_HasProxy" inheritedFromTypeName="ILab" csharp="result == this.Proxy != null" vb="result = Me.Proxy &lt;&gt; Nothing">result == this.Proxy != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.DaveSexton#Labs#ILab#Proxy">
      <summary>
            This property is not intended to be used directly on a <see cref="T:DaveSexton.Labs.Lab" /> instance.
            </summary>
      <getter>
        <ensures csharp="result == null" vb="result = Nothing">result == null</ensures>
        <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_Proxy" inheritedFromTypeName="ILab" csharp="result == default(DaveSexton.Labs.Lab) || result.ActualLab == this" vb="result = Nothing OrElse result.ActualLab = Me">result == default(DaveSexton.Labs.Lab) || result.ActualLab == this</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="!this.HasProxy" vb="Not Me.HasProxy">!this.HasProxy</requires>
        <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
        <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="value.IsProxy" vb="value.IsProxy">value.IsProxy</requires>
        <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="value.ActualLab == this" vb="value.ActualLab = Me">value.ActualLab == this</requires>
      </setter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.IsProxy">
      <summary>
            Gets whether the lab is a proxy for <see cref="P:DaveSexton.Labs.Lab.ActualLab" />.
            </summary>
      <getter>
        <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_IsProxy" inheritedFromTypeName="ILab" csharp="result == this.ActualLab != this" vb="result = Me.ActualLab &lt;&gt; Me">result == this.ActualLab != this</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.ActualLab">
      <summary>
            Gets the actual <see cref="T:DaveSexton.Labs.ILab" /> instance that this <see cref="T:DaveSexton.Labs.Lab" /> represents.
            </summary>
      <remarks>
            The <see cref="P:DaveSexton.Labs.Lab.ActualLab" /> property is useful for UI labs that derive from a control base
            and implement <see cref="T:DaveSexton.Labs.ILab" />.  Since the <see cref="T:DaveSexton.Labs.Lab" /> object doesn't derive from 
            the control base, the UI lab host must be able to retrieve a reference to the underlying 
            <see cref="T:DaveSexton.Labs.ILab" /> instance.
            </remarks>
      <getter>
        <ensures csharp="result == this.actualLab" vb="result = Me.actualLab">result == this.actualLab</ensures>
        <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_ActualLab" inheritedFromTypeName="ILab" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.SourceCode">
      <summary>
            Gets the lab's source code.
            </summary>
      <remarks>
        <para>
            The <see cref="P:DaveSexton.Labs.Lab.SourceCode" /> property depends upon lab applications using the <strong>Labs.targets</strong>
            file as part of its normal build process.  This file embeds the source code for all types that implement
            <see cref="T:DaveSexton.Labs.ILab" /> into the target assembly.
            </para>
        <para>
            The <see cref="P:DaveSexton.Labs.Lab.SourceCode" /> property is virtual so that derived types may acquire the lab's source code 
            using a different mechanism.
            </para>
      </remarks>
      <value>The lab's source code if found; otherwise, <see langword="null" />.</value>
    </member>
    <member name="P:DaveSexton.Labs.Lab.SourceXaml">
      <summary>
            Gets the lab's source XAML.
            </summary>
      <remarks>
        <para>
            The <see cref="P:DaveSexton.Labs.Lab.SourceXaml" /> property depends upon lab applications using the <strong>Labs.targets</strong>
            file as part of its normal build process.  This file embeds the source XAML for all types that implement 
            <see cref="T:DaveSexton.Labs.ILab" /> into the target assembly.
            </para>
        <para>
            The <see cref="P:DaveSexton.Labs.Lab.SourceXaml" /> property is virtual so that derived types may acquire the lab's source XAML 
            using a different mechanism.
            </para>
      </remarks>
      <value>The lab's source XAML if found; otherwise, <see langword="null" />.</value>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousLab.#ctor(System.Boolean,System.Action)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousLab" /> class.
            </summary>
      <requires csharp="main != null" vb="main &lt;&gt; Nothing">main != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousLab.#ctor(System.Boolean,DaveSexton.Labs.IExperiment[])">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousLab" /> class.
            </summary>
      <requires csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousLab.#ctor(System.Boolean,System.Func{System.Boolean},System.Action)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousLab" /> class.
            </summary>
      <requires csharp="canExecute != null" vb="canExecute &lt;&gt; Nothing">canExecute != null</requires>
      <requires csharp="main != null" vb="main &lt;&gt; Nothing">main != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousLab.#ctor(System.Boolean,System.Func{System.Boolean},DaveSexton.Labs.IExperiment[])">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousLab" /> class.
            </summary>
      <requires csharp="canExecute != null" vb="canExecute &lt;&gt; Nothing">canExecute != null</requires>
      <requires csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
    </member>
    <member name="T:DaveSexton.Labs.IFile">
      <summary>
            Represents a file.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.IFile.Delete">
      <summary>
            Deletes the file on disc.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.IFile.Exists">
      <summary>
            Gets a value indicating whether the file exists on disc.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.IFile.FullName">
      <summary>
            Gets the full path and name of the file.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.IFile.Name">
      <summary>
            Gets the name of the file, without its path.
            </summary>
    </member>
    <member name="T:DaveSexton.Labs.IFolder">
      <summary>
            Represents a file system folder.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.IFolder.Delete">
      <summary>
            Deletes the folder on disc.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.IFolder.Exists">
      <summary>
            Gets a value indicating whether the folder exists on disc.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.IFolder.FullName">
      <summary>
            Gets the full path and name of the folder.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.IFolder.Name">
      <summary>
            Gets the name of the folder, without its path.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.FormatSourceCode(System.String)">
      <summary>
            Formats the specified source code.
            </summary>
      <remarks>
            If you override the <see cref="P:DaveSexton.Labs.WindowsLab.SourceCode" /> property and do not call the base implementation, 
            then <see cref="M:DaveSexton.Labs.WindowsLab.FormatSourceCode(System.String)" /> will not be called.
            </remarks>
      <param name="source">The source code to be formatted.</param>
      <returns>Formatted source code or <see langword="null" /> to indicate that the default 
            formatting should be used.</returns>
      <requires inheritedFrom="M:DaveSexton.Labs.ILab.FormatSourceCode(System.String)" inheritedFromTypeName="ILab" csharp="!IsNullOrEmpty(source)" vb="Not IsNullOrEmpty(source)">!string.IsNullOrEmpty(source)</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.FormatSourceXaml(System.String)">
      <summary>
            Formats the specified XAML.
            </summary>
      <remarks>
            If you override the <see cref="P:DaveSexton.Labs.WindowsLab.SourceXaml" /> property and do not call the base implementation, 
            then <see cref="M:DaveSexton.Labs.WindowsLab.FormatSourceXaml(System.String)" /> will not be called.
            </remarks>
      <param name="source">The XAML to be formatted.</param>
      <returns>Formatted XAML or <see langword="null" /> to indicate that the default 
            formatting should be used.</returns>
      <requires inheritedFrom="M:DaveSexton.Labs.ILab.FormatSourceXaml(System.String)" inheritedFromTypeName="ILab" csharp="!IsNullOrEmpty(source)" vb="Not IsNullOrEmpty(source)">!string.IsNullOrEmpty(source)</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.#ctor(System.Boolean)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.WindowsLab" /> class for derived classes.
            </summary>
      <ensures csharp="!this.HasProxy" vb="Not Me.HasProxy">!this.HasProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.TraceReplaceableLine(System.String,System.Object[])">
      <remarks>
            This method may seem unnecessary, but it's required for parity with the RxxLab class in the Rxx project, which uses 
            the ConsoleLab class and the SilverlightConsoleLab class depending upon the target framework.  In the ConsoleLab 
            class, this method replaces the last user input line without adding new lines to the console.
            </remarks>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.TraceReplaceableLine(System.String)">
      <remarks>
            This method may seem unnecessary, but it's required for parity with the RxxLab class in the Rxx project, which uses 
            the ConsoleLab class and the SilverlightConsoleLab class depending upon the target framework.  In the ConsoleLab 
            class, this method replaces the last user input line without adding new lines to the console.
            </remarks>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.WindowsConsoleLab" /> class for derived classes.
            </summary>
      <ensures csharp="!this.HasProxy" vb="Not Me.HasProxy">!this.HasProxy</ensures>
    </member>
    <member name="P:DaveSexton.Labs.WindowsConsoleLab.PauseBetweenExperiments">
      <summary>
            Gets or sets whether the lab should pause for user input after each experiment completes.
            The default value is <see langword="true" />.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleKeyConverter.FromKey(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
      <summary>
            Converts the non-printable keys only (and Enter).
            </summary>
    </member>
    <member name="T:DaveSexton.Labs.LabController">
      <summary>
            Executes <see cref="T:DaveSexton.Labs.Lab" /> instances and optionally discovers labs automatically.
            </summary>
      <remarks>
            - Typically provides a UI for choosing labs to be executed.
            - Discovery or Catalog
            
            Automatically discovers types that derive from <see cref="T:DaveSexton.Labs.Lab" /> within the assembly
            in which the type that derives from <see cref="T:DaveSexton.Labs.LabController" /> is defined.
            
            ..Catalog can create instances of labs to be executed..
            </remarks>
      <invariant>factory != null</invariant>
    </member>
    <member name="T:DaveSexton.Labs.LabTraceListener">
      <summary>
            Represents a <see cref="T:System.Diagnostics.TraceListener" /> for <see cref="T:DaveSexton.Labs.LabTraceSource" />.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceListener.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.LabTraceListener" /> class for derived classes.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabTraceListener.#ctor(System.String)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.LabTraceListener" /> class for derived classes.
            </summary>
      <requires csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabController.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.LabController" /> class for derived classes.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabController.#ctor(DaveSexton.Labs.LabCatalog)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.LabController" /> class for derived classes.
            </summary>
      <requires csharp="catalog != null" vb="catalog &lt;&gt; Nothing">catalog != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLabController.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.ConsoleLabController" /> class.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLabController.#ctor(DaveSexton.Labs.LabCatalog)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.ConsoleLabController" /> class.
            </summary>
      <requires csharp="catalog != null" vb="catalog &lt;&gt; Nothing">catalog != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.ExperimentAttribute.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.ExperimentAttribute" /> class.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.ExperimentAttribute.#ctor(System.String)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.ExperimentAttribute" /> class.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabFactoryBase`1.#ctor(DaveSexton.Labs.LabCatalog)">
      <summary>
            Constructs a new instance of the <see cref="!:LabFactoryBase" /> class for derived classes.
            </summary>
      <requires csharp="catalog != null" vb="catalog &lt;&gt; Nothing">catalog != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.InputAcquirer.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.InputAcquirer" /> class for derived classes.
            </summary>
      <ensures csharp="!this.HasValue" vb="Not Me.HasValue">!this.HasValue</ensures>
    </member>
    <member name="T:DaveSexton.Labs.Properties.TraceSourceText">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.TraceSourceText.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.TraceSourceText.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.TraceSourceText.Failure">
      <summary>
              Looks up a localized string similar to Failed.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.TraceSourceText.Success">
      <summary>
              Looks up a localized string similar to Success.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.TraceSourceText.UnknownException">
      <summary>
              Looks up a localized string similar to {Unknown Exception}.
            </summary>
    </member>
    <member name="T:DaveSexton.Labs.ILabHost">
      <summary>
            Represents an <see cref="T:DaveSexton.Labs.ILab" /> host.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.ILabHost.LoadLabs(DaveSexton.Labs.LabCategory)">
      <summary>
            Loads all labs in the specified <paramref name="category" />.
            </summary>
      <param name="category">The category from which to load labs.</param>
      <requires csharp="category != null" vb="category &lt;&gt; Nothing">category != null</requires>
      <requires csharp="category.IsRoot" vb="category.IsRoot">category.IsRoot</requires>
    </member>
    <member name="M:DaveSexton.Labs.ILabHost.SetCurrentLab(DaveSexton.Labs.Lab)">
      <summary>
            Sets the specified <paramref name="lab" /> as the current lab.
            </summary>
      <param name="lab">The <see cref="T:DaveSexton.Labs.Lab" /> to be set as the current lab.</param>
      <requires csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <requires csharp="this.CanChangeLab" vb="Me.CanChangeLab">this.CanChangeLab</requires>
    </member>
    <member name="M:DaveSexton.Labs.ILabHost.Write(System.String,System.Diagnostics.TraceEventType)">
      <summary>
            Writes the specified message to the console output.
            </summary>
      <param name="message">The message to be written.</param>
      <param name="eventType">The type of the message.</param>
    </member>
    <member name="M:DaveSexton.Labs.ILabHost.WriteLine(System.String,System.Diagnostics.TraceEventType)">
      <summary>
            Writes the specified message and a new line to the console output.
            </summary>
      <param name="message">The message to be written.</param>
      <param name="eventType">The type of the message.</param>
    </member>
    <member name="M:DaveSexton.Labs.ILabHost.Clear">
      <summary>
            Clears the console output.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.ILabHost.ApplicationTitle">
      <summary>
            Gets or sets the application's title.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.ILabHost.CanChangeLab">
      <summary>
            Gets or sets a value indicating whether the current lab is selectable.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.InputAcquirer`1.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.InputAcquirer`1" /> class.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabFactory.#ctor(DaveSexton.Labs.LabCatalog)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.LabFactory" /> class.
            </summary>
      <requires csharp="catalog != null" vb="catalog &lt;&gt; Nothing">catalog != null</requires>
    </member>
    <member name="T:DaveSexton.Labs.OutOfBrowserContentControl">
      <summary>
            When used in a Silverlight lab, ensures that the lab is only shown when the application is running 
            in Out-of-Browser mode.
            </summary>
      <remarks>
        <para>
            If the application is not running in Out-of-Browser mode, then the lab's UI is hidden and the user is 
            instead presented with instructions to either install the application or to launch the application, 
            depending upon whether it's already installed.
            </para>
        <alert type="note">
          <see cref="T:DaveSexton.Labs.OutOfBrowserContentControl" /> is only meaningful in Silverlight labs; however, it is available 
            on all supported platforms to facilitate linking XAML files between projects.  For non-Silverlight labs, 
            it behaves identically to <see cref="T:System.Windows.Controls.ContentControl" /> with its <see cref="!:VerticalContentAlignment" /> and 
            <see cref="!:HorizontalContentAlignment" /> properties set to <strong>Stretch</strong> by default.
            </alert>
      </remarks>
    </member>
    <member name="M:DaveSexton.Labs.OutOfBrowserContentControl.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.OutOfBrowserContentControl" /> class.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.ProxyLab.#ctor(DaveSexton.Labs.ILab)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.ProxyLab" /> class.
            </summary>
      <requires csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <ensures csharp="this.IsProxy" vb="Me.IsProxy">this.IsProxy</ensures>
      <ensures csharp="this.ActualLab == lab" vb="Me.ActualLab = lab">this.ActualLab == lab</ensures>
    </member>
    <member name="T:DaveSexton.Labs.LabCatalog">
      <summary>
            Provides members that specify the activation and discovery strategy
            of the <see cref="T:DaveSexton.Labs.LabController" />, and optionally creates 
            <see cref="T:DaveSexton.Labs.Lab" /> objects to be executed with priority before all
            of the discovered labs.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.LabCatalog.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.LabCatalog" /> class for derived classes.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.LabCatalog.Activation">
      <summary>
            Gets the strategy that the <see cref="T:DaveSexton.Labs.LabController" /> will use to 
            discover and activate labs.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.LabCatalog.LabTypes">
      <summary>
            Gets a sequence of types that derive from <see cref="T:DaveSexton.Labs.Lab" /> to be 
            used by the <see cref="T:DaveSexton.Labs.LabController" /> during automatic discovery.
            The specific semantics of <see cref="P:DaveSexton.Labs.LabCatalog.LabTypes" /> depends upon the 
            <see cref="P:DaveSexton.Labs.LabCatalog.Activation" /> strategy of the <see cref="T:DaveSexton.Labs.LabCatalog" />.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.LabCatalog.PriorityLabs">
      <summary>
            Gets a sequence of <see cref="T:DaveSexton.Labs.ILab" /> objects to be activated or displayed by
            the <see cref="T:DaveSexton.Labs.LabController" /> in the order that they are received.
            </summary>
      <remarks>
        <alert type="note">
            Whether or not <see cref="P:DaveSexton.Labs.LabCatalog.PriorityLabs" /> are used by the <see cref="T:DaveSexton.Labs.LabController" />
            depends upon the <see cref="P:DaveSexton.Labs.LabCatalog.Activation" /> strategy of the <see cref="T:DaveSexton.Labs.LabCatalog" />.
            </alert>
      </remarks>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:System.Diagnostics.TraceSourceExtensions">
      <summary>
            Provides trace extension methods for <see cref="T:System.Diagnostics.TraceSource" />.
            </summary>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.Trace(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>
            Sends the specified message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.Trace(System.Diagnostics.TraceSource,System.String)">
      <summary>
            Sends the specified message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.Trace(System.Diagnostics.TraceSource,System.Object)">
      <summary>
            Sends the specified <paramref name="value" /> to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the value.</param>
      <param name="value">The object to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceLine(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>
            Sends the specified message to all listeners and starts a new line.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceLine(System.Diagnostics.TraceSource,System.String)">
      <summary>
            Sends the specified message to all listeners and starts a new line.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceLine(System.Diagnostics.TraceSource,System.Object)">
      <summary>
            Sends the specified <paramref name="value" /> to all listeners and starts a new line.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the value.</param>
      <param name="value">The object to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceEvent(System.Diagnostics.TraceSource,System.Diagnostics.TraceEventType,System.String,System.Object[])">
      <summary>
            Sends the specified event message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="eventType">The type of the event.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceEvent(System.Diagnostics.TraceSource,System.Diagnostics.TraceEventType,System.String)">
      <summary>
            Sends the specified event message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="eventType">The type of the event.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.Exception)">
      <summary>
            Sends the specified <paramref name="exception" /> to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the <paramref name="exception" />.</param>
      <param name="exception">The <see cref="T:System.Exception" /> to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.Func{System.String})">
      <summary>
            When error tracing is enabled, invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String)">
      <summary>
            Sends the specified error message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>
            Sends the specified error message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.Func{System.String})">
      <summary>
            When warning tracing is enabled, invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String)">
      <summary>
            Sends the specified warning message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>
            Sends the specified warning message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarningIf(System.Diagnostics.TraceSource,System.Func{System.Boolean},System.Func{System.String})">
      <summary>
            When warning tracing is enabled, invokes the specified <paramref name="predicate" /> function and if <see langword="true" />, 
            invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="predicate != null" vb="predicate &lt;&gt; Nothing">predicate != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarningIf(System.Diagnostics.TraceSource,System.Boolean,System.String)">
      <summary>
            Sends the specified warning message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceWarningIf(System.Diagnostics.TraceSource,System.Boolean,System.String,System.Object[])">
      <summary>
            Sends the specified warning message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.Func{System.String})">
      <summary>
            When verbose tracing is enabled, invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String)">
      <summary>
            Sends the specified verbose message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>
            Sends the specified verbose message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerboseIf(System.Diagnostics.TraceSource,System.Func{System.Boolean},System.Func{System.String})">
      <summary>
            When verbose tracing is enabled, invokes the specified <paramref name="predicate" /> function and if <see langword="true" />, 
            invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="predicate != null" vb="predicate &lt;&gt; Nothing">predicate != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerboseIf(System.Diagnostics.TraceSource,System.Boolean,System.String)">
      <summary>
            Sends the specified verbose message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceVerboseIf(System.Diagnostics.TraceSource,System.Boolean,System.String,System.Object[])">
      <summary>
            Sends the specified verbose message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceInformation(System.Diagnostics.TraceSource,System.Func{System.String})">
      <summary>
            When information tracing is enabled, invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceInformationIf(System.Diagnostics.TraceSource,System.Func{System.String})">
      <summary>
            When information tracing is enabled, invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceInformationIf(System.Diagnostics.TraceSource,System.Func{System.Boolean},System.Func{System.String})">
      <summary>
            When information tracing is enabled, invokes the specified <paramref name="predicate" /> function and if <see langword="true" />, 
            invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="predicate != null" vb="predicate &lt;&gt; Nothing">predicate != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceInformationIf(System.Diagnostics.TraceSource,System.Boolean,System.String)">
      <summary>
            Sends the specified informational message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceInformationIf(System.Diagnostics.TraceSource,System.Boolean,System.String,System.Object[])">
      <summary>
            Sends the specified informational message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStart(System.Diagnostics.TraceSource,System.Func{System.String})">
      <summary>
            When activity tracing is enabled, invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStart(System.Diagnostics.TraceSource,System.String)">
      <summary>
            Sends the specified start message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStart(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>
            Sends the specified start message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStartIf(System.Diagnostics.TraceSource,System.Func{System.Boolean},System.Func{System.String})">
      <summary>
            When activity tracing is enabled, invokes the specified <paramref name="predicate" /> function and if <see langword="true" />, 
            invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="predicate != null" vb="predicate &lt;&gt; Nothing">predicate != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStartIf(System.Diagnostics.TraceSource,System.Boolean,System.String)">
      <summary>
            Sends the specified start message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStartIf(System.Diagnostics.TraceSource,System.Boolean,System.String,System.Object[])">
      <summary>
            Sends the specified start message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStop(System.Diagnostics.TraceSource,System.Func{System.String})">
      <summary>
            When activity tracing is enabled, invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStop(System.Diagnostics.TraceSource,System.String)">
      <summary>
            Sends the specified stop message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStop(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>
            Sends the specified stop message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStopIf(System.Diagnostics.TraceSource,System.Func{System.Boolean},System.Func{System.String})">
      <summary>
            When activity tracing is enabled, invokes the specified <paramref name="predicate" /> function and if <see langword="true" />, 
            invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="predicate != null" vb="predicate &lt;&gt; Nothing">predicate != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStopIf(System.Diagnostics.TraceSource,System.Boolean,System.String)">
      <summary>
            Sends the specified stop message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceStopIf(System.Diagnostics.TraceSource,System.Boolean,System.String,System.Object[])">
      <summary>
            Sends the specified stop message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceResume(System.Diagnostics.TraceSource,System.Func{System.String})">
      <summary>
            When activity tracing is enabled, invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceResume(System.Diagnostics.TraceSource,System.String)">
      <summary>
            Sends the specified resume message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceResume(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>
            Sends the specified resume message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceResumeIf(System.Diagnostics.TraceSource,System.Func{System.Boolean},System.Func{System.String})">
      <summary>
            When activity tracing is enabled, invokes the specified <paramref name="predicate" /> function and if <see langword="true" />, 
            invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="predicate != null" vb="predicate &lt;&gt; Nothing">predicate != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceResumeIf(System.Diagnostics.TraceSource,System.Boolean,System.String)">
      <summary>
            Sends the specified resume message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceResumeIf(System.Diagnostics.TraceSource,System.Boolean,System.String,System.Object[])">
      <summary>
            Sends the specified resume message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceSuspend(System.Diagnostics.TraceSource,System.Func{System.String})">
      <summary>
            When activity tracing is enabled, invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceSuspend(System.Diagnostics.TraceSource,System.String)">
      <summary>
            Sends the specified suspend message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceSuspend(System.Diagnostics.TraceSource,System.String,System.Object[])">
      <summary>
            Sends the specified suspend message to all listeners.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceSuspendIf(System.Diagnostics.TraceSource,System.Func{System.Boolean},System.Func{System.String})">
      <summary>
            When activity tracing is enabled, invokes the specified <paramref name="predicate" /> function and if <see langword="true" />, 
            invokes the specified <paramref name="messageFactory" /> function and traces the result.
            </summary>
      <remarks>
            This overload is useful for when it's expensive to create trace messages.  By passing in a function instead, 
            the configured trace level may be consulted first to see if it allows messages to be written at the specified 
            level.  Only if the mesage can be written will the function be invoked.
            </remarks>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="predicate != null" vb="predicate &lt;&gt; Nothing">predicate != null</requires>
      <requires csharp="messageFactory != null" vb="messageFactory &lt;&gt; Nothing">messageFactory != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceSuspendIf(System.Diagnostics.TraceSource,System.Boolean,System.String)">
      <summary>
            Sends the specified suspend message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="message">The message to be sent.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:System.Diagnostics.TraceSourceExtensions.TraceSuspendIf(System.Diagnostics.TraceSource,System.Boolean,System.String,System.Object[])">
      <summary>
            Sends the specified suspend message to all listeners if the specified <paramref name="predicate" /> is <see langword="true" />.
            </summary>
      <param name="source">The <see cref="T:System.Diagnostics.TraceSource" /> object from which to send the message.</param>
      <param name="predicate">A value indicating whether the message is sent.</param>
      <param name="format">The message to be formatted.</param>
      <param name="args">The format arguments.</param>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="T:DaveSexton.Labs.LabActivationStrategies">
      <summary>
            Defines flags that specify how labs are discovered by the 
            <see cref="T:DaveSexton.Labs.LabController" /> when using a <see cref="T:DaveSexton.Labs.LabCatalog" />.
            </summary>
    </member>
    <member name="F:DaveSexton.Labs.LabActivationStrategies.None">
      <summary>
            Instructs the <see cref="!:LabContoller" /> to not run any labs.
            </summary>
    </member>
    <member name="F:DaveSexton.Labs.LabActivationStrategies.CatalogLabs">
      <summary>
            Instructs the <see cref="!:LabContoller" /> to execute all labs that are returned
            by the <see cref="P:DaveSexton.Labs.LabCatalog.PriorityLabs" /> property.
            </summary>
      <remarks>
        <alert type="note">
            Labs returned by <see cref="P:DaveSexton.Labs.LabCatalog.PriorityLabs" /> are executed before all discovered 
            labs when both the <see cref="F:DaveSexton.Labs.LabActivationStrategies.CatalogLabs" /> and <see cref="F:DaveSexton.Labs.LabActivationStrategies.DiscoveredLabs" /> 
            flags are specified.
            </alert>
      </remarks>
    </member>
    <member name="F:DaveSexton.Labs.LabActivationStrategies.DiscoveredLabs">
      <summary>
            Instructs the <see cref="!:LabContoller" /> to execute all discovered labs.
            </summary>
      <remarks>
        <alert type="note">
            Labs returned by <see cref="P:DaveSexton.Labs.LabCatalog.PriorityLabs" /> are executed before all discovered 
            labs when both the <see cref="F:DaveSexton.Labs.LabActivationStrategies.CatalogLabs" /> and <see cref="F:DaveSexton.Labs.LabActivationStrategies.DiscoveredLabs" /> 
            flags are specified.
            </alert>
      </remarks>
    </member>
    <member name="F:DaveSexton.Labs.LabActivationStrategies.DiscoverExplicitLabTypesOnly">
      <summary>
            Instructs the <see cref="!:LabContoller" /> to execute only those discovered labs 
            that are of the types specified in <see cref="P:DaveSexton.Labs.LabCatalog.LabTypes" />.  This flag 
            is only meaningful when <see cref="F:DaveSexton.Labs.LabActivationStrategies.DiscoveredLabs" /> is also specified.
            </summary>
      <remarks>
        <alert type="note">
          <see cref="F:DaveSexton.Labs.LabActivationStrategies.DiscoverExplicitLabTypesOnly" /> and <see cref="F:DaveSexton.Labs.LabActivationStrategies.ExcludeCatalogLabTypesFromDiscovery" /> 
            are mutually exclusive.  If both flags are specified, then  
            <see cref="F:DaveSexton.Labs.LabActivationStrategies.DiscoverExplicitLabTypesOnly" /> is applied.
            </alert>
      </remarks>
    </member>
    <member name="F:DaveSexton.Labs.LabActivationStrategies.ExcludeCatalogLabTypesFromDiscovery">
      <summary>
            Instructs the <see cref="!:LabContoller" /> to execute only those discovered labs 
            that are not of the types specified in <see cref="P:DaveSexton.Labs.LabCatalog.LabTypes" />.  This 
            flag is only meaningful when <see cref="F:DaveSexton.Labs.LabActivationStrategies.DiscoveredLabs" /> is also specified.
            </summary>
      <remarks>
        <alert type="note">
          <see cref="F:DaveSexton.Labs.LabActivationStrategies.DiscoverExplicitLabTypesOnly" /> and <see cref="F:DaveSexton.Labs.LabActivationStrategies.ExcludeCatalogLabTypesFromDiscovery" /> 
            are mutually exclusive.  If both flags are specified, then  
            <see cref="F:DaveSexton.Labs.LabActivationStrategies.DiscoverExplicitLabTypesOnly" /> is applied.
            </alert>
      </remarks>
    </member>
    <member name="F:DaveSexton.Labs.LabActivationStrategies.All">
      <summary>
            Instructs the <see cref="!:LabContoller" /> to execute all labs that are returned
            by the <see cref="P:DaveSexton.Labs.LabCatalog.PriorityLabs" /> property, followed by all discovered labs.
            This flag is a combination of <see cref="F:DaveSexton.Labs.LabActivationStrategies.CatalogLabs" /> and <see cref="F:DaveSexton.Labs.LabActivationStrategies.DiscoveredLabs" />.
            </summary>
    </member>
    <member name="F:DaveSexton.Labs.LabActivationStrategies.AllByCatalog">
      <summary>
            Instructs the <see cref="!:LabContoller" /> to execute all labs that are returned
            by the <see cref="P:DaveSexton.Labs.LabCatalog.PriorityLabs" /> property, followed by all discovered labs 
            of the types specified in <see cref="P:DaveSexton.Labs.LabCatalog.LabTypes" />.  This flag is a 
            combination of <see cref="F:DaveSexton.Labs.LabActivationStrategies.All" /> and <see cref="F:DaveSexton.Labs.LabActivationStrategies.DiscoverExplicitLabTypesOnly" />.
            </summary>
    </member>
    <member name="F:DaveSexton.Labs.LabActivationStrategies.AllWithExclusions">
      <summary>
            Instructs the <see cref="!:LabContoller" /> to execute all labs that are returned
            by the <see cref="P:DaveSexton.Labs.LabCatalog.PriorityLabs" /> property, followed by all discovered labs of
            types that are not specified in <see cref="P:DaveSexton.Labs.LabCatalog.LabTypes" />.  This flag is a 
            combination of <see cref="F:DaveSexton.Labs.LabActivationStrategies.All" /> and <see cref="F:DaveSexton.Labs.LabActivationStrategies.ExcludeCatalogLabTypesFromDiscovery" />.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.LabCategory.CategoriesRecursive">
      <summary>
            Gets an enumerable that yields this category and then iterates over all of its <see cref="P:DaveSexton.Labs.LabCategory.Subcategories" />, recursively.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.AllLabsCompleted">
      <summary>
              Looks up a localized string similar to All labs completed..
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.Anonymous">
      <summary>
              Looks up a localized string similar to Anonymous.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.AssemblyTitleFormat">
      <summary>
              Looks up a localized string similar to {0} Labs.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.CategoryMenu">
      <summary>
               Looks up a localized string similar to Categories: 
            .
             </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.CategoryNameFormat">
      <summary>
              Looks up a localized string similar to {0} / {1}.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.ChoiceFormat">
      <summary>
              Looks up a localized string similar to    {0}. {1}.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.ChoicePrompt">
      <summary>
              Looks up a localized string similar to Enter your choice (Esc to exit): .
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.Completed_Inline">
      <summary>
              Looks up a localized string similar to  completed..
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.DefaultCategoryName">
      <summary>
              Looks up a localized string similar to {No Category}.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.DefaultFileDialogFilter">
      <summary>
              Looks up a localized string similar to All Files (*.*)|*.*.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.DefaultFolderDialogTitle">
      <summary>
              Looks up a localized string similar to Select Folder.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.DefaultOpenFileDialogTitle">
      <summary>
              Looks up a localized string similar to Open File.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.DefaultOpenMultipleFilesDialogTitle">
      <summary>
              Looks up a localized string similar to Open Files.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.DefaultSaveFileDialogTitle">
      <summary>
              Looks up a localized string similar to Save File.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.DiscoveredLabsCountFormat">
      <summary>
              Looks up a localized string similar to {0} lab(s) found..
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.ExperimentInfoFormat">
      <summary>
              Looks up a localized string similar to {0} (experiment {1} of {2}){3}.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.ExperimentTitleFormat">
      <summary>
              Looks up a localized string similar to {0}{1}.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.InvalidUrl">
      <summary>
              Looks up a localized string similar to The specified URL is not valid..
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.LabCompletedFormat">
      <summary>
              Looks up a localized string similar to {0} Lab Completed..
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.LabDescriptionPrefix">
      <summary>
              Looks up a localized string similar to       .
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.LabInfoFormat">
      <summary>
              Looks up a localized string similar to {0} (lab {1} of {2}).
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.LabMenuFormat">
      <summary>
               Looks up a localized string similar to {0} Labs: 
            .
             </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.LabStartingFormat">
      <summary>
              Looks up a localized string similar to Starting {0} Lab....
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.MainMenu">
      <summary>
               Looks up a localized string similar to Choose an option: 
            .
             </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.MainMenuExecuteAllLabs">
      <summary>
              Looks up a localized string similar to    2. Execute all labs..
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.MainMenuExecuteIndividualLabs">
      <summary>
              Looks up a localized string similar to    1. Execute individual labs of your choice..
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.NoHost">
      <summary>
              Looks up a localized string similar to A host was not loaded.  Call the Show method first and ensure that it doesn't throw an exception..
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.ParentCategoryChoice">
      <summary>
              Looks up a localized string similar to    0. {Parent Category}.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.PressAltToShowSourceCode">
      <summary>
              Looks up a localized string similar to Alt+[Letter] shows the lab's source code..
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.PressAnyKeyToCancel_Inline">
      <summary>
              Looks up a localized string similar to - Press any key to cancel....
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.PressAnyKeyToContinue">
      <summary>
              Looks up a localized string similar to Press any key to continue....
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.PressAnyKeyToContinue_Inline">
      <summary>
              Looks up a localized string similar to   Press any key to continue....
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.PressAnyKeyToEndProgram">
      <summary>
              Looks up a localized string similar to Press any key to end this program....
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.PressAnyKeyToStartNextExperimentEscapeToCancel">
      <summary>
              Looks up a localized string similar to Press any key to start the next experiment or press Esc to stop....
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.PressAnyKeyToStartNextExperimentQToCancel">
      <summary>
              Looks up a localized string similar to Press any key to start the next experiment or press Q to stop....
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.PressShiftToOpenSourceCode">
      <summary>
              Looks up a localized string similar to Shift+[Letter] opens the lab's source code..
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.ShowSourceCode">
      <summary>
              Looks up a localized string similar to Show the source code for each lab?  (Y/N): .
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.Skipped_Inline">
      <summary>
              Looks up a localized string similar to - Skipped.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.TraceEventFormat">
      <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.WelcomeFormat">
      <summary>
              Looks up a localized string similar to Welcome to {0}, {1}.
            </summary>
    </member>
    <member name="P:DaveSexton.Labs.Properties.Resources.ZeroLabs">
      <summary>
              Looks up a localized string similar to No labs were found so the program will exit..
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousTraceListener.#ctor(System.Action{System.String},System.Action{System.String})">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousTraceListener" /> class.
            </summary>
      <requires csharp="write != null" vb="write &lt;&gt; Nothing">write != null</requires>
      <requires csharp="writeLine != null" vb="writeLine &lt;&gt; Nothing">writeLine != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousTraceListener.#ctor(System.Action{System.String},System.Action{System.String},System.Action{System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String})">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousTraceListener" /> class.
            </summary>
      <requires csharp="write != null" vb="write &lt;&gt; Nothing">write != null</requires>
      <requires csharp="writeLine != null" vb="writeLine &lt;&gt; Nothing">writeLine != null</requires>
      <requires csharp="trace != null" vb="trace &lt;&gt; Nothing">trace != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousTraceListener.#ctor(System.String,System.Action{System.String},System.Action{System.String})">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousTraceListener" /> class.
            </summary>
      <requires csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <requires csharp="write != null" vb="write &lt;&gt; Nothing">write != null</requires>
      <requires csharp="writeLine != null" vb="writeLine &lt;&gt; Nothing">writeLine != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousTraceListener.#ctor(System.String,System.Action{System.String},System.Action{System.String},System.Action{System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String})">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.AnonymousTraceListener" /> class.
            </summary>
      <requires csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <requires csharp="write != null" vb="write &lt;&gt; Nothing">write != null</requires>
      <requires csharp="writeLine != null" vb="writeLine &lt;&gt; Nothing">writeLine != null</requires>
      <requires csharp="trace != null" vb="trace &lt;&gt; Nothing">trace != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.ConsoleLab" /> class for derived classes.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.#ctor(System.Boolean)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.ConsoleLab" /> class for derived classes.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.#ctor(System.String)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.ConsoleLab" /> class for derived classes.
            </summary>
      <requires csharp="!IsNullOrWhiteSpace(labName)" vb="Not IsNullOrWhiteSpace(labName)">!string.IsNullOrWhiteSpace(labName)</requires>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.ConsoleLab" /> class for derived classes.
            </summary>
      <requires csharp="!IsNullOrWhiteSpace(labName)" vb="Not IsNullOrWhiteSpace(labName)">!string.IsNullOrWhiteSpace(labName)</requires>
    </member>
    <member name="P:DaveSexton.Labs.ConsoleLab.PauseBetweenExperiments">
      <summary>
            Gets or sets whether the lab should pause for user input after each experiment completes.
            The default value is <see langword="true" />.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabController.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.WindowsLabController" /> class.
            </summary>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabController.#ctor(DaveSexton.Labs.ILabHost)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.WindowsLabController" /> class.
            </summary>
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabController.#ctor(DaveSexton.Labs.LabCatalog)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.WindowsLabController" /> class.
            </summary>
      <requires csharp="catalog != null" vb="catalog &lt;&gt; Nothing">catalog != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabController.#ctor(DaveSexton.Labs.ILabHost,DaveSexton.Labs.LabCatalog)">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.WindowsLabController" /> class.
            </summary>
      <requires csharp="host != null" vb="host &lt;&gt; Nothing">host != null</requires>
      <requires csharp="catalog != null" vb="catalog &lt;&gt; Nothing">catalog != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabHost.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:DaveSexton.Labs.WindowsLabHost" /> class.
            </summary>
    </member>
    <member name="M:System.Reflection.ReflectionExtensions.TryGetAttributeValue``1(System.Reflection.MemberInfo,System.Func{``0,System.String},System.String@)">
      <requires csharp="typeOrMember != (System.Reflection.MemberInfo)null" vb="typeOrMember &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">typeOrMember != (System.Reflection.MemberInfo)null</requires>
      <requires csharp="getValue != null" vb="getValue &lt;&gt; Nothing">getValue != null</requires>
      <ensures csharp="result ⇒ !IsNullOrWhiteSpace(value)" vb="result Implies Not IsNullOrWhiteSpace(value)">!result || !string.IsNullOrWhiteSpace(value)</ensures>
    </member>
    <member name="M:System.Reflection.ReflectionExtensions.TryGetAttributeValue``1(System.Reflection.Assembly,System.Func{``0,System.String},System.String@)">
      <requires csharp="assembly != (System.Reflection.Assembly)null" vb="assembly &lt;&gt; ((System.Reflection.Assembly)Nothing) ">assembly != (System.Reflection.Assembly)null</requires>
      <requires csharp="getValue != null" vb="getValue &lt;&gt; Nothing">getValue != null</requires>
      <ensures csharp="result ⇒ !IsNullOrWhiteSpace(value)" vb="result Implies Not IsNullOrWhiteSpace(value)">!result || !string.IsNullOrWhiteSpace(value)</ensures>
    </member>
    <member name="M:System.Reflection.ReflectionExtensions.TryGetAttributeValue``1(``0[],System.Func{``0,System.String},System.String@)">
      <requires csharp="attributes != null" vb="attributes &lt;&gt; Nothing">attributes != null</requires>
      <requires csharp="getValue != null" vb="getValue &lt;&gt; Nothing">getValue != null</requires>
      <ensures csharp="result ⇒ !IsNullOrWhiteSpace(value)" vb="result Implies Not IsNullOrWhiteSpace(value)">!result || !string.IsNullOrWhiteSpace(value)</ensures>
    </member>
    <member name="M:System.Reflection.ReflectionExtensions.TryGetAssemblyTitle(System.Reflection.Assembly,System.String@)">
      <requires csharp="assembly != (System.Reflection.Assembly)null" vb="assembly &lt;&gt; ((System.Reflection.Assembly)Nothing) ">assembly != (System.Reflection.Assembly)null</requires>
      <ensures csharp="result ⇒ !IsNullOrWhiteSpace(title)" vb="result Implies Not IsNullOrWhiteSpace(title)">!result || !string.IsNullOrWhiteSpace(title)</ensures>
    </member>
    <member name="M:System.Reflection.ReflectionExtensions.TryGetDisplayName(System.Reflection.MemberInfo,System.String@)">
      <requires csharp="typeOrMember != (System.Reflection.MemberInfo)null" vb="typeOrMember &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">typeOrMember != (System.Reflection.MemberInfo)null</requires>
      <ensures csharp="result ⇒ !IsNullOrWhiteSpace(displayName)" vb="result Implies Not IsNullOrWhiteSpace(displayName)">!result || !string.IsNullOrWhiteSpace(displayName)</ensures>
    </member>
    <member name="M:System.Reflection.ReflectionExtensions.TryGetDescription(System.Reflection.MemberInfo,System.String@)">
      <requires csharp="typeOrMember != (System.Reflection.MemberInfo)null" vb="typeOrMember &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">typeOrMember != (System.Reflection.MemberInfo)null</requires>
      <ensures csharp="result ⇒ !IsNullOrWhiteSpace(description)" vb="result Implies Not IsNullOrWhiteSpace(description)">!result || !string.IsNullOrWhiteSpace(description)</ensures>
    </member>
    <member name="M:System.Reflection.ReflectionExtensions.TryGetCategory(System.Reflection.MemberInfo,System.String@)">
      <requires csharp="typeOrMember != (System.Reflection.MemberInfo)null" vb="typeOrMember &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">typeOrMember != (System.Reflection.MemberInfo)null</requires>
      <ensures csharp="result ⇒ !IsNullOrWhiteSpace(category)" vb="result Implies Not IsNullOrWhiteSpace(category)">!result || !string.IsNullOrWhiteSpace(category)</ensures>
    </member>
    <member name="M:System.Reflection.ReflectionExtensions.TryGetExperiment(System.Reflection.MemberInfo,System.String@)">
      <requires csharp="typeOrMember != (System.Reflection.MemberInfo)null" vb="typeOrMember &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">typeOrMember != (System.Reflection.MemberInfo)null</requires>
      <ensures csharp="result ⇒ !IsNullOrWhiteSpace(displayName)" vb="result Implies Not IsNullOrWhiteSpace(displayName)">!result || !string.IsNullOrWhiteSpace(displayName)</ensures>
    </member>
    <member name="T:DaveSexton.Labs.WindowsLabController">
      <invariant>host != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabController.Show(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <requires csharp="discoveryCatalog != null" vb="discoveryCatalog &lt;&gt; Nothing">discoveryCatalog != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabController.Show(System.Windows.Window)">
      <requires csharp="window != null" vb="window &lt;&gt; Nothing">window != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabController.Show(System.Windows.Window,System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <requires csharp="window != null" vb="window &lt;&gt; Nothing">window != null</requires>
      <requires csharp="discoveryCatalog != null" vb="discoveryCatalog &lt;&gt; Nothing">discoveryCatalog != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabController.ShowWindow(System.Windows.Window)">
      <requires csharp="window != null" vb="window &lt;&gt; Nothing">window != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabController.MainMenu(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})">
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.MainMenu(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" inheritedFromTypeName="LabController" csharp="labs != null" vb="labs &lt;&gt; Nothing">labs != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.MainMenu(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" inheritedFromTypeName="LabController" csharp="labs.Count &gt; 0" vb="labs.Count &gt; 0">labs.Count &gt; 0</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabController.EndDebug(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})">
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.EndDebug(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" inheritedFromTypeName="LabController" csharp="labs != null" vb="labs &lt;&gt; Nothing">labs != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.EndDebug(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" inheritedFromTypeName="LabController" csharp="labs.Count &gt; 0" vb="labs.Count &gt; 0">labs.Count &gt; 0</requires>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLabController.Host">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.ConsoleLab">
      <invariant>!IsProxy</invariant>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.UserInputPrompt(System.String,System.Object[])">
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.UserInput(System.String,System.Object[])">
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.UserInput">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.UserInputKeys(System.String,System.Object[])">
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.UserInputKey(System.String,System.Object[])">
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.UserInputUrl(System.String,System.Object[])">
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
      <ensures csharp="result != (System.Uri)null" vb="result &lt;&gt; ((System.Uri)Nothing) ">result != (System.Uri)null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.UserInputUrl(System.UriKind,System.String,System.Object[])">
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
      <ensures csharp="result != (System.Uri)null" vb="result &lt;&gt; ((System.Uri)Nothing) ">result != (System.Uri)null</ensures>
      <ensures csharp="kind != (System.UriKind)1 || result.IsAbsoluteUri" vb="kind &lt;&gt; ((System.UriKind)1) OrElse result.IsAbsoluteUri">kind != (System.UriKind)1 || result.IsAbsoluteUri</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.UserInputFilesToOpen(System.String,System.String,System.String)">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.IsReadOnly" vb="result.IsReadOnly">result.IsReadOnly</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.MoveCursorToUserInput">
      <ensures csharp="this.lastUserInput == old(this.lastUserInput)" vb="Me.lastUserInput = old(Me.lastUserInput) ">this.lastUserInput == old(this.lastUserInput)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.MoveCursorToLastReplaceableTraceLine">
      <ensures csharp="this.lastReplaceableTraceLine == old(this.lastReplaceableTraceLine)" vb="Me.lastReplaceableTraceLine = old(Me.lastReplaceableTraceLine) ">this.lastReplaceableTraceLine == old(this.lastReplaceableTraceLine)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <requires inheritedFrom="M:DaveSexton.Labs.Lab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="Lab" csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.Lab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="Lab" csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.Lab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="Lab" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.Lab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="Lab" csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures inheritedFrom="M:DaveSexton.Labs.Lab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="Lab" csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLabController.EndDebug(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})">
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.EndDebug(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" inheritedFromTypeName="LabController" csharp="labs != null" vb="labs &lt;&gt; Nothing">labs != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.EndDebug(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" inheritedFromTypeName="LabController" csharp="labs.Count &gt; 0" vb="labs.Count &gt; 0">labs.Count &gt; 0</requires>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLabController.MainMenu(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})">
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.MainMenu(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" inheritedFromTypeName="LabController" csharp="labs != null" vb="labs &lt;&gt; Nothing">labs != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.MainMenu(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})" inheritedFromTypeName="LabController" csharp="labs.Count &gt; 0" vb="labs.Count &gt; 0">labs.Count &gt; 0</requires>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLabController.WriteChoices(DaveSexton.Labs.LabCategory,System.Boolean)">
      <requires csharp="category != null" vb="category &lt;&gt; Nothing">category != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLabController.WriteLabHeader(System.String,System.Int32,System.Int32,System.ConsoleColor)">
      <requires csharp="number &gt; 0" vb="number &gt; 0">number &gt; 0</requires>
      <requires csharp="total &gt; 0" vb="total &gt; 0">total &gt; 0</requires>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLabController.WaitForSelection(System.String,System.ConsoleKey[])">
      <requires csharp="prompt != null" vb="prompt &lt;&gt; Nothing">prompt != null</requires>
      <requires csharp="validChoices != null" vb="validChoices &lt;&gt; Nothing">validChoices != null</requires>
      <ensures csharp="(!(result.Key != (System.ConsoleKey)27) || Contains&lt;System.ConsoleKey&gt;(validChoices, result.Key)) != 0" vb="(result.Key &lt;&gt; ((System.ConsoleKey)27) AndAlso Not Contains(validChoices, result.Key)) &lt;&gt; 0">(!(result.Key != (System.ConsoleKey)27) || System.Linq.Enumerable.Contains&lt;System.ConsoleKey&gt;(validChoices, result.Key)) != 0</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLabController.FormatLabDescription(System.String)">
      <requires csharp="!IsNullOrWhiteSpace(description)" vb="Not IsNullOrWhiteSpace(description)">!string.IsNullOrWhiteSpace(description)</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLabController.LabStarting(DaveSexton.Labs.Lab,System.Int32,System.Int32)">
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.LabStarting(DaveSexton.Labs.Lab,System.Int32,System.Int32)" inheritedFromTypeName="LabController" csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.LabStarting(DaveSexton.Labs.Lab,System.Int32,System.Int32)" inheritedFromTypeName="LabController" csharp="number &gt; 0" vb="number &gt; 0">number &gt; 0</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.LabStarting(DaveSexton.Labs.Lab,System.Int32,System.Int32)" inheritedFromTypeName="LabController" csharp="total &gt; 0" vb="total &gt; 0">total &gt; 0</requires>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleLabController.LabCompleted(DaveSexton.Labs.Lab,System.Int32,System.Int32,System.Boolean)">
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.LabCompleted(DaveSexton.Labs.Lab,System.Int32,System.Int32,System.Boolean)" inheritedFromTypeName="LabController" csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.LabCompleted(DaveSexton.Labs.Lab,System.Int32,System.Int32,System.Boolean)" inheritedFromTypeName="LabController" csharp="number &gt; 0" vb="number &gt; 0">number &gt; 0</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.LabController.LabCompleted(DaveSexton.Labs.Lab,System.Int32,System.Int32,System.Boolean)" inheritedFromTypeName="LabController" csharp="total &gt; 0" vb="total &gt; 0">total &gt; 0</requires>
    </member>
    <member name="P:DaveSexton.Labs.OutOfBrowserContentControl.ApplicationName">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.OutOfBrowserContentControl.Application">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.FileObject">
      <invariant>file != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.FileObject.#ctor(System.String)">
      <requires csharp="fileName != null" vb="fileName &lt;&gt; Nothing">fileName != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.FileObject.#ctor(System.IO.FileInfo)">
      <requires csharp="file != null" vb="file &lt;&gt; Nothing">file != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.FileObject.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:DaveSexton.Labs.FileObject.FullName">
      <getter>
        <ensures inheritedFrom="M:System.IO.FileSystemInfo.get_FullName" inheritedFromTypeName="FileSystemInfo" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.FileObject.Name">
      <getter>
        <ensures inheritedFrom="M:System.IO.FileSystemInfo.get_Name" inheritedFromTypeName="FileSystemInfo" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousLab.CreateName">
      <ensures csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.AnonymousLab.Main">
      <requires inheritedFrom="M:DaveSexton.Labs.Lab.Main" inheritedFromTypeName="Lab" csharp="this.CanExecute()" vb="Me.CanExecute()">this.CanExecute()</requires>
    </member>
    <member name="P:DaveSexton.Labs.AnonymousLab.Experiments">
      <getter>
        <ensures inheritedFrom="M:DaveSexton.Labs.Lab.get_Experiments" inheritedFromTypeName="Lab" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.InverseBooleanToVisibilityConverter">
      <invariant>converter != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.FileSystem.GetFile(System.String)">
      <requires csharp="fileName != null" vb="fileName &lt;&gt; Nothing">fileName != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.FileSystem.GetFolder(System.String)">
      <requires csharp="path != null" vb="path &lt;&gt; Nothing">path != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:DaveSexton.Labs.NativeWindow">
      <invariant>window != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.NativeWindow.#ctor(System.Windows.Window)">
      <requires csharp="window != null" vb="window &lt;&gt; Nothing">window != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabController.Format(System.String,System.Object[])">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.LabController.Start(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <requires csharp="discoveryCatalog != null" vb="discoveryCatalog &lt;&gt; Nothing">discoveryCatalog != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabController.MainMenu(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})">
      <requires csharp="labs != null" vb="labs &lt;&gt; Nothing">labs != null</requires>
      <requires csharp="labs.Count &gt; 0" vb="labs.Count &gt; 0">labs.Count &gt; 0</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabController.EndDebug(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})">
      <requires csharp="labs != null" vb="labs &lt;&gt; Nothing">labs != null</requires>
      <requires csharp="labs.Count &gt; 0" vb="labs.Count &gt; 0">labs.Count &gt; 0</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabController.TraceHeader(System.Reflection.Assembly,System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Int32)">
      <requires csharp="discoveryCatalog != null" vb="discoveryCatalog &lt;&gt; Nothing">discoveryCatalog != null</requires>
      <requires csharp="labCount &gt; -1" vb="labCount &gt; -1">labCount &gt; -1</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabController.TraceHeader(System.Reflection.Assembly,System.Int32)">
      <requires csharp="assembly != (System.Reflection.Assembly)null" vb="assembly &lt;&gt; ((System.Reflection.Assembly)Nothing) ">assembly != (System.Reflection.Assembly)null</requires>
      <requires csharp="labCount &gt; -1" vb="labCount &gt; -1">labCount &gt; -1</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabController.LabStarting(DaveSexton.Labs.Lab,System.Int32,System.Int32)">
      <requires csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <requires csharp="number &gt; 0" vb="number &gt; 0">number &gt; 0</requires>
      <requires csharp="total &gt; 0" vb="total &gt; 0">total &gt; 0</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabController.LabCompleted(DaveSexton.Labs.Lab,System.Int32,System.Int32,System.Boolean)">
      <requires csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <requires csharp="number &gt; 0" vb="number &gt; 0">number &gt; 0</requires>
      <requires csharp="total &gt; 0" vb="total &gt; 0">total &gt; 0</requires>
    </member>
    <member name="P:DaveSexton.Labs.LabController.ApplicationTitle">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:DaveSexton.Labs.AsyncTaskQueue.Enqueue(System.Threading.Tasks.Task)">
      <requires csharp="task != null" vb="task &lt;&gt; Nothing">task != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabCatalog.GetSourceCodeResourceManager(System.Reflection.Assembly)">
      <requires csharp="assembly != (System.Reflection.Assembly)null" vb="assembly &lt;&gt; ((System.Reflection.Assembly)Nothing) ">assembly != (System.Reflection.Assembly)null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabCatalog.GetSourceXamlResourceManager(System.Reflection.Assembly)">
      <requires csharp="assembly != (System.Reflection.Assembly)null" vb="assembly &lt;&gt; ((System.Reflection.Assembly)Nothing) ">assembly != (System.Reflection.Assembly)null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabCatalog.CreateSourceCodeResourceManager(System.Reflection.Assembly)">
      <requires csharp="assembly != (System.Reflection.Assembly)null" vb="assembly &lt;&gt; ((System.Reflection.Assembly)Nothing) ">assembly != (System.Reflection.Assembly)null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabCatalog.CreateSourceXamlResourceManager(System.Reflection.Assembly)">
      <requires csharp="assembly != (System.Reflection.Assembly)null" vb="assembly &lt;&gt; ((System.Reflection.Assembly)Nothing) ">assembly != (System.Reflection.Assembly)null</requires>
    </member>
    <member name="P:DaveSexton.Labs.InputAcquirer`1.Value">
      <getter>
        <requires csharp="this.HasValue" vb="Me.HasValue">this.HasValue</requires>
      </getter>
      <setter>
        <requires csharp="!this.HasValue" vb="Not Me.HasValue">!this.HasValue</requires>
        <ensures csharp="this.HasValue" vb="Me.HasValue">this.HasValue</ensures>
      </setter>
    </member>
    <member name="P:DaveSexton.Labs.ExperimentAttribute.DisplayName">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.WindowsLab">
      <invariant>listener != null</invariant>
      <invariant>!((ILab)this).IsProxy</invariant>
      <invariant>proxy == null || proxy.ActualLab == this</invariant>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.InvokeOnStaThread``1(System.Func{``0})">
      <requires csharp="new DaveSexton.Labs.WindowsLab.&lt;&gt;c__DisplayClass1&lt;T&gt;(){&#xD;&#xA;    function = function, &#xD;&#xA;}.function != null" vb="(() =&gt; {&#xD;&#xA;    DaveSexton.Labs.WindowsLab.&lt;&gt;c__DisplayClass1&lt;T&gt; local_0_prime = New DaveSexton.Labs.WindowsLab.&lt;&gt;c__DisplayClass1(Of T)();&#xD;&#xA;    (local_0_prime.function = function)&#xD;&#xA;    return local_0_prime; })().function &lt;&gt; Nothing">new DaveSexton.Labs.WindowsLab.&lt;&gt;c__DisplayClass1&lt;T&gt;(){
    function = function, 
}.function != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.InvokeOnDispatcher``1(System.Windows.Threading.Dispatcher,System.Func{``0})">
      <requires csharp="function != null" vb="function &lt;&gt; Nothing">function != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.UserInputFilesToOpen(System.String,System.String,System.String,System.Windows.Threading.Dispatcher)">
      <ensures csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        DaveSexton.Labs.WindowsLab.&lt;&gt;c__DisplayClassc local_3 = new DaveSexton.Labs.WindowsLab.&lt;&gt;c__DisplayClassc();&#xD;&#xA;        local_3.title = title;&#xD;&#xA;        local_3.filter = filter;&#xD;&#xA;        local_3.initialDirectory = initialDirectory;&#xD;&#xA;    }&#xD;&#xA;    return result != null; })()" vb="(() =&gt; {&#xD;&#xA;    DaveSexton.Labs.WindowsLab.&lt;&gt;c__DisplayClassc local_3 = New DaveSexton.Labs.WindowsLab.&lt;&gt;c__DisplayClassc();&#xD;&#xA;    local_3.title = title&#xD;&#xA;    local_3.filter = filter&#xD;&#xA;    local_3.initialDirectory = initialDirectory&#xD;&#xA;    return result &lt;&gt; Nothing; })()">(() =&gt; {
    {
        DaveSexton.Labs.WindowsLab.&lt;&gt;c__DisplayClassc local_3 = new DaveSexton.Labs.WindowsLab.&lt;&gt;c__DisplayClassc();
        local_3.title = title;
        local_3.filter = filter;
        local_3.initialDirectory = initialDirectory;
    }
    return result != null; })()</ensures>
      <ensures csharp="result.IsReadOnly" vb="result.IsReadOnly">result.IsReadOnly</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.UserInputFilesToOpen(System.String,System.String,System.String)">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.IsReadOnly" vb="result.IsReadOnly">result.IsReadOnly</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.DaveSexton#Labs#ILab#get_IsProxy">
      <ensures csharp="!result" vb="Not result">!result</ensures>
      <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_IsProxy" inheritedFromTypeName="ILab" csharp="result == this.ActualLab != this" vb="result = Me.ActualLab &lt;&gt; Me">result == this.ActualLab != this</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.DaveSexton#Labs#ILab#get_ActualLab">
      <ensures csharp="result == this" vb="result = Me">result == this</ensures>
      <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_ActualLab" inheritedFromTypeName="ILab" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.CreateListener">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.TraceHeader">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.ProxyAssigned">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.Format(System.String,System.Object[])">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLab.#ctor">
      <ensures csharp="!this.HasProxy" vb="Not Me.HasProxy">!this.HasProxy</ensures>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLab.DisplayName">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLab.FullCategory">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLab.Description">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLab.Proxy">
      <getter>
        <ensures csharp="result == this.proxy" vb="result = Me.proxy">result == this.proxy</ensures>
        <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_Proxy" inheritedFromTypeName="ILab" csharp="result == default(DaveSexton.Labs.Lab) || result.ActualLab == this" vb="result = Nothing OrElse result.ActualLab = Me">result == default(DaveSexton.Labs.Lab) || result.ActualLab == this</ensures>
      </getter>
      <setter>
        <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="!this.HasProxy" vb="Not Me.HasProxy">!this.HasProxy</requires>
        <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
        <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="value.IsProxy" vb="value.IsProxy">value.IsProxy</requires>
        <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="value.ActualLab == this" vb="value.ActualLab = Me">value.ActualLab == this</requires>
      </setter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLab.HasProxy">
      <getter>
        <ensures csharp="result == this.Proxy != null" vb="result = Me.Proxy &lt;&gt; Nothing">result == this.Proxy != null</ensures>
        <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_HasProxy" inheritedFromTypeName="ILab" csharp="result == this.Proxy != null" vb="result = Me.Proxy &lt;&gt; Nothing">result == this.Proxy != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLab.DaveSexton#Labs#ILab#IsProxy">
      <getter>
        <ensures csharp="!result" vb="Not result">!result</ensures>
        <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_IsProxy" inheritedFromTypeName="ILab" csharp="result == this.ActualLab != this" vb="result = Me.ActualLab &lt;&gt; Me">result == this.ActualLab != this</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLab.DaveSexton#Labs#ILab#ActualLab">
      <getter>
        <ensures csharp="result == this" vb="result = Me">result == this</ensures>
        <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_ActualLab" inheritedFromTypeName="ILab" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLab.Listener">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLab.Storage">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLab.StorageDirectory">
      <getter>
        <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
        <ensures csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabHost.LoadLabs(DaveSexton.Labs.LabCategory)">
      <requires inheritedFrom="M:DaveSexton.Labs.ILabHost.LoadLabs(DaveSexton.Labs.LabCategory)" inheritedFromTypeName="ILabHost" csharp="category != null" vb="category &lt;&gt; Nothing">category != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.ILabHost.LoadLabs(DaveSexton.Labs.LabCategory)" inheritedFromTypeName="ILabHost" csharp="category.IsRoot" vb="category.IsRoot">category.IsRoot</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsLabHost.SetCurrentLab(DaveSexton.Labs.Lab)">
      <requires inheritedFrom="M:DaveSexton.Labs.ILabHost.SetCurrentLab(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILabHost" csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.ILabHost.SetCurrentLab(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILabHost" csharp="this.CanChangeLab" vb="Me.CanChangeLab">this.CanChangeLab</requires>
    </member>
    <member name="P:DaveSexton.Labs.WindowsLabHost.Labs">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.ProxyLab">
      <invariant>IsProxy</invariant>
    </member>
    <member name="M:DaveSexton.Labs.ProxyLab.Main">
      <requires inheritedFrom="M:DaveSexton.Labs.Lab.Main" inheritedFromTypeName="Lab" csharp="this.CanExecute()" vb="Me.CanExecute()">this.CanExecute()</requires>
    </member>
    <member name="T:DaveSexton.Labs.LabCategory">
      <invariant>parent != null</invariant>
      <invariant>depth &gt;= 0</invariant>
      <invariant>name == null || !string.IsNullOrWhiteSpace(name)</invariant>
      <invariant>labs != null</invariant>
      <invariant>labs.IsReadOnly</invariant>
      <invariant>subcategories != null</invariant>
      <invariant>subcategories.IsReadOnly</invariant>
    </member>
    <member name="M:DaveSexton.Labs.LabCategory.#ctor(System.String,System.Int32,System.Collections.Generic.IEnumerable{DaveSexton.Labs.Lab},System.Collections.Generic.IEnumerable{DaveSexton.Labs.LabCategory})">
      <requires csharp="!IsNullOrWhiteSpace(name)" vb="Not IsNullOrWhiteSpace(name)">!string.IsNullOrWhiteSpace(name)</requires>
      <requires csharp="depth &gt; 0" vb="depth &gt; 0">depth &gt; 0</requires>
      <requires csharp="labs != null" vb="labs &lt;&gt; Nothing">labs != null</requires>
      <requires csharp="subcategories != null" vb="subcategories &lt;&gt; Nothing">subcategories != null</requires>
      <ensures csharp="this.depth &gt; 0" vb="Me.depth &gt; 0">this.depth &gt; 0</ensures>
    </member>
    <member name="M:DaveSexton.Labs.LabCategory.#ctor(System.Collections.Generic.IEnumerable{DaveSexton.Labs.Lab},System.Collections.Generic.IEnumerable{DaveSexton.Labs.LabCategory})">
      <requires csharp="labs != null" vb="labs &lt;&gt; Nothing">labs != null</requires>
      <requires csharp="subcategories != null" vb="subcategories &lt;&gt; Nothing">subcategories != null</requires>
      <ensures csharp="this.depth == 0" vb="Me.depth = 0">this.depth == 0</ensures>
    </member>
    <member name="M:DaveSexton.Labs.LabCategory.Organize(System.Collections.Generic.ICollection{DaveSexton.Labs.Lab})">
      <requires csharp="labs != null" vb="labs &lt;&gt; Nothing">labs != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.IsRoot" vb="result.IsRoot">result.IsRoot</ensures>
    </member>
    <member name="M:DaveSexton.Labs.LabCategory.OrganizeRecursive(System.Collections.Generic.IEnumerable{DaveSexton.Labs.Lab},System.Int32)">
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        System.Func&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, &lt;&gt;f__AnonymousType6&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, System.Tuple&lt;System.Collections.Generic.List&lt;DaveSexton.Labs.Lab&gt;, System.Collections.Generic.IEnumerable&lt;DaveSexton.Labs.LabCategory&gt;&gt;&gt;&gt; local_2 = (System.Func&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, &lt;&gt;f__AnonymousType6&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, System.Tuple&lt;System.Collections.Generic.List&lt;DaveSexton.Labs.Lab&gt;, System.Collections.Generic.IEnumerable&lt;DaveSexton.Labs.LabCategory&gt;&gt;&gt;&gt;)null;&#xD;&#xA;        System.Func&lt;&lt;&gt;f__AnonymousType6&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, System.Tuple&lt;System.Collections.Generic.List&lt;DaveSexton.Labs.Lab&gt;, System.Collections.Generic.IEnumerable&lt;DaveSexton.Labs.LabCategory&gt;&gt;&gt;, DaveSexton.Labs.LabCategory&gt; local_3 = (System.Func&lt;&lt;&gt;f__AnonymousType6&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, System.Tuple&lt;System.Collections.Generic.List&lt;DaveSexton.Labs.Lab&gt;, System.Collections.Generic.IEnumerable&lt;DaveSexton.Labs.LabCategory&gt;&gt;&gt;, DaveSexton.Labs.LabCategory&gt;)null;&#xD;&#xA;        DaveSexton.Labs.LabCategory.&lt;&gt;c__DisplayClass19 local_4 = new DaveSexton.Labs.LabCategory.&lt;&gt;c__DisplayClass19();&#xD;&#xA;        local_4.depth = depth;&#xD;&#xA;    }&#xD;&#xA;    return labs != null; })()" vb="(() =&gt; {&#xD;&#xA;    System.Func&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, &lt;&gt;f__AnonymousType6&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, System.Tuple&lt;System.Collections.Generic.List&lt;DaveSexton.Labs.Lab&gt;, System.Collections.Generic.IEnumerable&lt;DaveSexton.Labs.LabCategory&gt;&gt;&gt;&gt; local_2 = ((System.Func(Of System.Linq.IGrouping(Of String, DaveSexton.Labs.Lab), &lt;&gt;f__AnonymousType6(Of System.Linq.IGrouping(Of String, DaveSexton.Labs.Lab), System.Tuple(Of System.Collections.Generic.List(Of DaveSexton.Labs.Lab), System.Collections.Generic.IEnumerable(Of DaveSexton.Labs.LabCategory)))))Nothing);&#xD;&#xA;    System.Func&lt;&lt;&gt;f__AnonymousType6&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, System.Tuple&lt;System.Collections.Generic.List&lt;DaveSexton.Labs.Lab&gt;, System.Collections.Generic.IEnumerable&lt;DaveSexton.Labs.LabCategory&gt;&gt;&gt;, DaveSexton.Labs.LabCategory&gt; local_3 = ((System.Func(Of &lt;&gt;f__AnonymousType6(Of System.Linq.IGrouping(Of String, DaveSexton.Labs.Lab), System.Tuple(Of System.Collections.Generic.List(Of DaveSexton.Labs.Lab), System.Collections.Generic.IEnumerable(Of DaveSexton.Labs.LabCategory))), DaveSexton.Labs.LabCategory))Nothing);&#xD;&#xA;    DaveSexton.Labs.LabCategory.&lt;&gt;c__DisplayClass19 local_4 = New DaveSexton.Labs.LabCategory.&lt;&gt;c__DisplayClass19();&#xD;&#xA;    local_4.depth = depth&#xD;&#xA;    return labs &lt;&gt; Nothing; })()">(() =&gt; {
    {
        System.Func&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, &lt;&gt;f__AnonymousType6&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, System.Tuple&lt;System.Collections.Generic.List&lt;DaveSexton.Labs.Lab&gt;, System.Collections.Generic.IEnumerable&lt;DaveSexton.Labs.LabCategory&gt;&gt;&gt;&gt; local_2 = (System.Func&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, &lt;&gt;f__AnonymousType6&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, System.Tuple&lt;System.Collections.Generic.List&lt;DaveSexton.Labs.Lab&gt;, System.Collections.Generic.IEnumerable&lt;DaveSexton.Labs.LabCategory&gt;&gt;&gt;&gt;)null;
        System.Func&lt;&lt;&gt;f__AnonymousType6&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, System.Tuple&lt;System.Collections.Generic.List&lt;DaveSexton.Labs.Lab&gt;, System.Collections.Generic.IEnumerable&lt;DaveSexton.Labs.LabCategory&gt;&gt;&gt;, DaveSexton.Labs.LabCategory&gt; local_3 = (System.Func&lt;&lt;&gt;f__AnonymousType6&lt;System.Linq.IGrouping&lt;string, DaveSexton.Labs.Lab&gt;, System.Tuple&lt;System.Collections.Generic.List&lt;DaveSexton.Labs.Lab&gt;, System.Collections.Generic.IEnumerable&lt;DaveSexton.Labs.LabCategory&gt;&gt;&gt;, DaveSexton.Labs.LabCategory&gt;)null;
        DaveSexton.Labs.LabCategory.&lt;&gt;c__DisplayClass19 local_4 = new DaveSexton.Labs.LabCategory.&lt;&gt;c__DisplayClass19();
        local_4.depth = depth;
    }
    return labs != null; })()</requires>
      <requires csharp="local_4.depth &gt;= 0" vb="local_4.depth &gt;= 0">local_4.depth &gt;= 0</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.Item1 != null" vb="result.Item1 &lt;&gt; Nothing">result.Item1 != null</ensures>
      <ensures csharp="result.Item2 != null" vb="result.Item2 &lt;&gt; Nothing">result.Item2 != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.LabCategory.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:DaveSexton.Labs.LabCategory.Name">
      <getter>
        <ensures csharp="this == DaveSexton.Labs.LabCategory.Empty || !IsNullOrWhiteSpace(result)" vb="Me = DaveSexton.Labs.LabCategory.Empty OrElse Not IsNullOrWhiteSpace(result)">this == DaveSexton.Labs.LabCategory.Empty || !string.IsNullOrWhiteSpace(result)</ensures>
        <ensures csharp="this != DaveSexton.Labs.LabCategory.Empty || result == string.Empty" vb="Me &lt;&gt; DaveSexton.Labs.LabCategory.Empty OrElse result = String.Empty ">this != DaveSexton.Labs.LabCategory.Empty || result == string.Empty</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.LabCategory.OrganizedName">
      <getter>
        <ensures csharp="this.IsRoot || this == DaveSexton.Labs.LabCategory.Empty || !IsNullOrWhiteSpace(result)" vb="Me.IsRoot OrElse Me = DaveSexton.Labs.LabCategory.Empty OrElse Not IsNullOrWhiteSpace(result)">this.IsRoot || this == DaveSexton.Labs.LabCategory.Empty || !string.IsNullOrWhiteSpace(result)</ensures>
        <ensures csharp="this.IsRoot ⇒ this != DaveSexton.Labs.LabCategory.Empty || result == string.Empty" vb="Me.IsRoot Implies Me &lt;&gt; DaveSexton.Labs.LabCategory.Empty OrElse result = String.Empty ">!this.IsRoot || this != DaveSexton.Labs.LabCategory.Empty || result == string.Empty</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.LabCategory.Labs">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures csharp="result.IsReadOnly" vb="result.IsReadOnly">result.IsReadOnly</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.LabCategory.LabsRecursive">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.LabCategory.Parent">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures csharp="result != DaveSexton.Labs.LabCategory.Empty == (this != DaveSexton.Labs.LabCategory.Empty &amp;&amp; !this.IsRoot)" vb="result &lt;&gt; DaveSexton.Labs.LabCategory.Empty = (Me &lt;&gt; DaveSexton.Labs.LabCategory.Empty AndAlso Not Me.IsRoot)">result != DaveSexton.Labs.LabCategory.Empty == (this != DaveSexton.Labs.LabCategory.Empty &amp;&amp; !this.IsRoot)</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.LabCategory.Subcategories">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures csharp="result.IsReadOnly" vb="result.IsReadOnly">result.IsReadOnly</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.LabCategory.Depth">
      <getter>
        <ensures csharp="this.IsRoot ⇒ result == 0" vb="Me.IsRoot Implies result = 0">!this.IsRoot || result == 0</ensures>
        <ensures csharp="this.IsRoot || result &gt; 0" vb="Me.IsRoot OrElse result &gt; 0">this.IsRoot || result &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.LabCategory.IsRoot">
      <getter>
        <ensures csharp="result == this.depth == 0" vb="result = Me.depth = 0">result == this.depth == 0</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.LabCategory.DefaultCategoryName">
      <getter>
        <ensures csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.AnonymousTraceListener">
      <invariant>trace != null</invariant>
      <invariant>write != null</invariant>
      <invariant>writeLine != null</invariant>
    </member>
    <member name="T:DaveSexton.Labs.MethodExperiment">
      <invariant>!string.IsNullOrWhiteSpace(displayName)</invariant>
      <invariant>description != null</invariant>
      <invariant>method != null</invariant>
      <invariant>lab != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.MethodExperiment.#ctor(System.Reflection.MethodInfo,DaveSexton.Labs.ILab)">
      <requires csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <requires csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <requires csharp="method.ReturnType == typeof(void) || method.ReturnType.IsAssignableFrom(typeof(System.Threading.Tasks.Task))" vb="method.ReturnType = typeof()  OrElse method.ReturnType.IsAssignableFrom(typeof(System.Threading.Tasks.Task))">method.ReturnType == typeof(void) || method.ReturnType.IsAssignableFrom(typeof(System.Threading.Tasks.Task))</requires>
      <requires csharp="method.GetParameters().Length == 0" vb="method.GetParameters().Length = 0">method.GetParameters().Length == 0</requires>
      <requires csharp="!method.IsGenericMethod" vb="Not method.IsGenericMethod">!method.IsGenericMethod</requires>
    </member>
    <member name="M:DaveSexton.Labs.MethodExperiment.FindAll(DaveSexton.Labs.ILab)">
      <requires csharp="new DaveSexton.Labs.MethodExperiment.&lt;&gt;c__DisplayClass2(){&#xD;&#xA;    lab = lab, &#xD;&#xA;}.lab != null" vb="(() =&gt; {&#xD;&#xA;    DaveSexton.Labs.MethodExperiment.&lt;&gt;c__DisplayClass2 local_2_prime = New DaveSexton.Labs.MethodExperiment.&lt;&gt;c__DisplayClass2();&#xD;&#xA;    (local_2_prime.lab = lab)&#xD;&#xA;    return local_2_prime; })().lab &lt;&gt; Nothing">new DaveSexton.Labs.MethodExperiment.&lt;&gt;c__DisplayClass2(){
    lab = lab, 
}.lab != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.IsReadOnly" vb="result.IsReadOnly">result.IsReadOnly</ensures>
    </member>
    <member name="M:DaveSexton.Labs.MethodExperiment.IsNamedExperiment(System.Reflection.MethodInfo)">
      <requires csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
    </member>
    <member name="M:DaveSexton.Labs.MethodExperiment.IsPublicExperiment(System.Reflection.MethodInfo,System.Type)">
      <requires csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <requires csharp="labType != (System.Type)null" vb="labType &lt;&gt; ((System.Type)Nothing) ">labType != (System.Type)null</requires>
    </member>
    <member name="P:DaveSexton.Labs.MethodExperiment.DisplayName">
      <getter>
        <ensures inheritedFrom="M:DaveSexton.Labs.IExperiment.get_DisplayName" inheritedFromTypeName="IExperiment" csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.MethodExperiment.Description">
      <getter>
        <ensures inheritedFrom="M:DaveSexton.Labs.IExperiment.get_Description" inheritedFromTypeName="IExperiment" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.FolderObject">
      <invariant>folder != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.FolderObject.#ctor(System.String)">
      <requires csharp="path != null" vb="path &lt;&gt; Nothing">path != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.FolderObject.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:DaveSexton.Labs.FolderObject.FullName">
      <getter>
        <ensures inheritedFrom="M:System.IO.FileSystemInfo.get_FullName" inheritedFromTypeName="FileSystemInfo" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.FolderObject.Name">
      <getter>
        <ensures inheritedFrom="M:System.IO.FileSystemInfo.get_Name" inheritedFromTypeName="FileSystemInfo" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.WindowsConsoleLabHost">
      <invariant>lab != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLabHost.#ctor(DaveSexton.Labs.Lab)">
      <requires csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <ensures csharp="!this.HasProxy" vb="Not Me.HasProxy">!this.HasProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLabHost.Create(DaveSexton.Labs.Lab)">
      <requires csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.IsProxy" vb="result.IsProxy">result.IsProxy</ensures>
    </member>
    <member name="P:DaveSexton.Labs.WindowsConsoleLabHost.HostedLab">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:DaveSexton.Labs.LabFactory.ImportLabs(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Collections.Generic.IList{System.Type})">
      <requires inheritedFrom="M:DaveSexton.Labs.LabFactoryBase`1.ImportLabs(`0,System.Collections.Generic.IList{System.Type})" inheritedFromTypeName="LabFactoryBase" csharp="(object)discoveryCatalog != null" vb="((Object)discoveryCatalog) &lt;&gt; Nothing">(object)discoveryCatalog != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.LabFactoryBase`1.ImportLabs(`0,System.Collections.Generic.IList{System.Type})" inheritedFromTypeName="LabFactoryBase" csharp="excludeLabs != null" vb="excludeLabs &lt;&gt; Nothing">excludeLabs != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabFactory.ShouldImportLab(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Collections.Generic.IList{System.Type})">
      <requires csharp="part != null" vb="part &lt;&gt; Nothing">part != null</requires>
      <requires csharp="excludeLabs != null" vb="excludeLabs &lt;&gt; Nothing">excludeLabs != null</requires>
    </member>
    <member name="T:DaveSexton.Labs.LabFactory.FilteredCatalog">
      <invariant>partCatalog != null</invariant>
      <invariant>parts != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.LabFactory.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}})">
      <requires csharp="partCatalog != null" vb="partCatalog &lt;&gt; Nothing">partCatalog != null</requires>
      <requires csharp="partFilter != null" vb="partFilter &lt;&gt; Nothing">partFilter != null</requires>
    </member>
    <member name="P:DaveSexton.Labs.LabFactory.CatalogLabTypes">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.InputAcquirer">
      <invariant>acquiredSignal != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.InputAcquirer.Acquire">
      <ensures csharp="this.HasValue" vb="Me.HasValue">this.HasValue</ensures>
    </member>
    <member name="M:DaveSexton.Labs.InputAcquirer.SetHasValue">
      <requires csharp="!this.HasValue" vb="Not Me.HasValue">!this.HasValue</requires>
      <ensures csharp="this.HasValue" vb="Me.HasValue">this.HasValue</ensures>
    </member>
    <member name="P:DaveSexton.Labs.InputAcquirer.HasValue">
      <getter>
        <ensures csharp="result == this.hasValue" vb="result = Me.hasValue">result == this.hasValue</ensures>
      </getter>
    </member>
    <member name="M:DaveSexton.Labs.Metadata.GetDisplayName(System.Reflection.MemberInfo,System.String,System.String[])">
      <requires csharp="typeOrMember != (System.Reflection.MemberInfo)null" vb="typeOrMember &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">typeOrMember != (System.Reflection.MemberInfo)null</requires>
      <requires csharp="!IsNullOrWhiteSpace(defaultName)" vb="Not IsNullOrWhiteSpace(defaultName)">!string.IsNullOrWhiteSpace(defaultName)</requires>
      <requires csharp="suffixes != null" vb="suffixes &lt;&gt; Nothing">suffixes != null</requires>
      <ensures csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Metadata.GetDescription(System.Reflection.MemberInfo)">
      <requires csharp="typeOrMember != (System.Reflection.MemberInfo)null" vb="typeOrMember &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">typeOrMember != (System.Reflection.MemberInfo)null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Metadata.GetCategories(System.Type,System.String[])">
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        new DaveSexton.Labs.Metadata.&lt;&gt;c__DisplayClass3().suffixes = suffixes;&#xD;&#xA;    }&#xD;&#xA;    return type != (System.Type)null; })()" vb="(() =&gt; {&#xD;&#xA;    New DaveSexton.Labs.Metadata.&lt;&gt;c__DisplayClass3().suffixes = suffixes&#xD;&#xA;    return type &lt;&gt; ((System.Type)Nothing) ; })()">(() =&gt; {
    {
        new DaveSexton.Labs.Metadata.&lt;&gt;c__DisplayClass3().suffixes = suffixes;
    }
    return type != (System.Type)null; })()</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.IsReadOnly" vb="result.IsReadOnly">result.IsReadOnly</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Metadata.RemoveSuffix(System.String,System.String[])">
      <requires csharp="suffixes != null" vb="suffixes &lt;&gt; Nothing">suffixes != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.DaveSexton#Labs#ILab#get_HasProxy">
      <ensures csharp="!result" vb="Not result">!result</ensures>
      <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_HasProxy" inheritedFromTypeName="ILab" csharp="result == this.Proxy != null" vb="result = Me.Proxy &lt;&gt; Nothing">result == this.Proxy != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.DaveSexton#Labs#ILab#get_Proxy">
      <ensures csharp="result == null" vb="result = Nothing">result == null</ensures>
      <ensures inheritedFrom="M:DaveSexton.Labs.ILab.get_Proxy" inheritedFromTypeName="ILab" csharp="result == default(DaveSexton.Labs.Lab) || result.ActualLab == this" vb="result = Nothing OrElse result.ActualLab = Me">result == default(DaveSexton.Labs.Lab) || result.ActualLab == this</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.DaveSexton#Labs#ILab#set_Proxy(DaveSexton.Labs.Lab)">
      <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="!this.HasProxy" vb="Not Me.HasProxy">!this.HasProxy</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="value.IsProxy" vb="value.IsProxy">value.IsProxy</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.ILab.set_Proxy(DaveSexton.Labs.Lab)" inheritedFromTypeName="ILab" csharp="value.ActualLab == this" vb="value.ActualLab = Me">value.ActualLab == this</requires>
    </member>
    <member name="M:DaveSexton.Labs.Lab.#ctor(DaveSexton.Labs.ILab)">
      <requires csharp="local_1.actualLab != null" vb="local_1.actualLab &lt;&gt; Nothing">local_1.actualLab != null</requires>
      <ensures csharp="this.IsProxy" vb="Me.IsProxy">this.IsProxy</ensures>
      <ensures csharp="this.ActualLab == local_1.actualLab" vb="Me.ActualLab = local_1.actualLab">this.ActualLab == local_1.actualLab</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.CreateListener">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.OverrideExperiments(System.Collections.Generic.IEnumerable{DaveSexton.Labs.IExperiment})">
      <requires csharp="newExperiments != null" vb="newExperiments &lt;&gt; Nothing">newExperiments != null</requires>
      <requires csharp="this.IsProxy" vb="Me.IsProxy">this.IsProxy</requires>
      <ensures csharp="this.OverriddenExperiments != null" vb="Me.OverriddenExperiments &lt;&gt; Nothing">this.OverriddenExperiments != null</ensures>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.RunExperimentsAsync(DaveSexton.Labs.IGUIConsoleLab)">
      <requires csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.Lab.ExecuteExperimentAsync(DaveSexton.Labs.IGUIConsoleLab,DaveSexton.Labs.IExperiment)">
      <requires csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <requires csharp="experiment != null" vb="experiment &lt;&gt; Nothing">experiment != null</requires>
    </member>
    <member name="P:DaveSexton.Labs.Lab.Listener">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.Experiments">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.OverriddenExperiments">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.Storage">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.Lab.StorageDirectory">
      <getter>
        <ensures csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        System.Func&lt;System.Text.StringBuilder, string&gt; local_2 = (System.Func&lt;System.Text.StringBuilder, string&gt;)null;&#xD;&#xA;    }&#xD;&#xA;    return !IsNullOrWhiteSpace(result); })()" vb="(() =&gt; {&#xD;&#xA;    System.Func&lt;System.Text.StringBuilder, string&gt; local_2 = ((System.Func(Of System.Text.StringBuilder, String))Nothing);&#xD;&#xA;    return Not IsNullOrWhiteSpace(result); })()">(() =&gt; {
    {
        System.Func&lt;System.Text.StringBuilder, string&gt; local_2 = (System.Func&lt;System.Text.StringBuilder, string&gt;)null;
    }
    return !string.IsNullOrWhiteSpace(result); })()</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.DefaultLabCatalog.PriorityLabs">
      <getter>
        <ensures inheritedFrom="M:DaveSexton.Labs.LabCatalog.get_PriorityLabs" inheritedFromTypeName="LabCatalog" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.DefaultLabCatalog.LabTypes">
      <getter>
        <ensures inheritedFrom="M:DaveSexton.Labs.LabCatalog.get_LabTypes" inheritedFromTypeName="LabCatalog" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleFormat.Wrap(System.String)">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleFormat.Wrap(System.String,System.Int32)">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleFormat.Wrap(System.String,System.String)">
      <requires csharp="linePrefix != null" vb="linePrefix &lt;&gt; Nothing">linePrefix != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleFormat.Wrap(System.String,System.String,System.Int32)">
      <requires csharp="new DaveSexton.Labs.ConsoleFormat.&lt;&gt;c__DisplayClass14(){&#xD;&#xA;    linePrefix = linePrefix, &#xD;&#xA;}.linePrefix != null" vb="(() =&gt; {&#xD;&#xA;    DaveSexton.Labs.ConsoleFormat.&lt;&gt;c__DisplayClass14 local_3_prime = New DaveSexton.Labs.ConsoleFormat.&lt;&gt;c__DisplayClass14();&#xD;&#xA;    (local_3_prime.linePrefix = linePrefix)&#xD;&#xA;    return local_3_prime; })().linePrefix &lt;&gt; Nothing">new DaveSexton.Labs.ConsoleFormat.&lt;&gt;c__DisplayClass14(){
    linePrefix = linePrefix, 
}.linePrefix != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleFormat.Words(System.String,System.Int32)">
      <ensures csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        new DaveSexton.Labs.ConsoleFormat.&lt;&gt;c__DisplayClass2d().lineLength = lineLength;&#xD;&#xA;    }&#xD;&#xA;    return result != null; })()" vb="(() =&gt; {&#xD;&#xA;    New DaveSexton.Labs.ConsoleFormat.&lt;&gt;c__DisplayClass2d().lineLength = lineLength&#xD;&#xA;    return result &lt;&gt; Nothing; })()">(() =&gt; {
    {
        new DaveSexton.Labs.ConsoleFormat.&lt;&gt;c__DisplayClass2d().lineLength = lineLength;
    }
    return result != null; })()</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleFormat.BreakWords(System.Char[],System.Int32)">
      <requires csharp="chars != null" vb="chars &lt;&gt; Nothing">chars != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.ConsoleFormat.BreakNewLines(System.Char[])">
      <requires csharp="chars != null" vb="chars &lt;&gt; Nothing">chars != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:DaveSexton.Labs.LabFactoryBase`1">
      <invariant>catalog != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.LabFactoryBase`1.NotNullOrDisabled(DaveSexton.Labs.ILab)">
      <pure />
      <ensures csharp="result ⇒ lab != null" vb="result Implies lab &lt;&gt; Nothing">!result || lab != null</ensures>
      <ensures csharp="result ⇒ lab.IsEnabled" vb="result Implies lab.IsEnabled">!result || lab.IsEnabled</ensures>
    </member>
    <member name="M:DaveSexton.Labs.LabFactoryBase`1.LoadLabs(`0)">
      <requires csharp="(object)discoveryCatalog != null" vb="((Object)discoveryCatalog) &lt;&gt; Nothing">(object)discoveryCatalog != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.IsReadOnly" vb="result.IsReadOnly">result.IsReadOnly</ensures>
    </member>
    <member name="M:DaveSexton.Labs.LabFactoryBase`1.ImportLabs(`0,System.Collections.Generic.IList{System.Type})">
      <requires csharp="(object)discoveryCatalog != null" vb="((Object)discoveryCatalog) &lt;&gt; Nothing">(object)discoveryCatalog != null</requires>
      <requires csharp="excludeLabs != null" vb="excludeLabs &lt;&gt; Nothing">excludeLabs != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.LabFactoryBase`1.LoadLabs(System.Collections.Generic.IEnumerable{DaveSexton.Labs.ILab})">
      <requires csharp="labs != null" vb="labs &lt;&gt; Nothing">labs != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.LabFactoryBase`1.Initialize(DaveSexton.Labs.ILab,DaveSexton.Labs.Lab)">
      <requires csharp="lab != null" vb="lab &lt;&gt; Nothing">lab != null</requires>
      <requires csharp="!lab.IsProxy" vb="Not lab.IsProxy">!lab.IsProxy</requires>
      <requires csharp="strongTypedLab != null" vb="strongTypedLab &lt;&gt; Nothing">strongTypedLab != null</requires>
      <requires csharp="strongTypedLab.ActualLab == lab" vb="strongTypedLab.ActualLab = lab">strongTypedLab.ActualLab == lab</requires>
    </member>
    <member name="P:DaveSexton.Labs.LabFactoryBase`1.Catalog">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:DaveSexton.Labs.WindowsConsoleLab">
      <invariant>inputAcquirers != null</invariant>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.EnsuresProxyUnmodified">
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.ProxyAssigned">
      <ensures csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        System.Func&lt;System.Threading.Tasks.Task&gt; local_2 = (System.Func&lt;System.Threading.Tasks.Task&gt;)null;&#xD;&#xA;    }&#xD;&#xA;    return this.HasExperiments == (this.BindingExperiments != default(System.Collections.Generic.IList&lt;DaveSexton.Labs.IExperiment&gt;) &amp;&amp; this.BindingExperiments.Count &gt; 0); })()" vb="(() =&gt; {&#xD;&#xA;    System.Func&lt;System.Threading.Tasks.Task&gt; local_2 = ((System.Func(Of System.Threading.Tasks.Task))Nothing);&#xD;&#xA;    return Me.HasExperiments = (Me.BindingExperiments &lt;&gt; Nothing AndAlso Me.BindingExperiments.Count &gt; 0); })()">(() =&gt; {
    {
        System.Func&lt;System.Threading.Tasks.Task&gt; local_2 = (System.Func&lt;System.Threading.Tasks.Task&gt;)null;
    }
    return this.HasExperiments == (this.BindingExperiments != default(System.Collections.Generic.IList&lt;DaveSexton.Labs.IExperiment&gt;) &amp;&amp; this.BindingExperiments.Count &gt; 0); })()</ensures>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <requires inheritedFrom="M:DaveSexton.Labs.WindowsLab.ProxyAssigned" inheritedFromTypeName="WindowsLab" csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.RegisterMainTask(System.Threading.Tasks.Task)">
      <requires csharp="task != null" vb="task &lt;&gt; Nothing">task != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.WhenMainCompletesAsync">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.RunExperimentsAsync">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.IsMainExperiment(DaveSexton.Labs.IExperiment)">
      <requires csharp="experiment != null" vb="experiment &lt;&gt; Nothing">experiment != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.Stop">
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.SelectedExperiment_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
      <requires csharp="e.NewValue != null" vb="e.NewValue &lt;&gt; Nothing">e.NewValue != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.DaveSexton#Labs#IGUIConsoleLab#ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
      <ensures inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentStartingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.DaveSexton#Labs#IGUIConsoleLab#ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
      <ensures inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentExecutingAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.DaveSexton#Labs#IGUIConsoleLab#ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)">
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="experiments != null" vb="experiments &lt;&gt; Nothing">experiments != null</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="experiments.IsReadOnly" vb="experiments.IsReadOnly">experiments.IsReadOnly</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="index &lt; experiments.Count" vb="index &lt; experiments.Count">index &lt; experiments.Count</requires>
      <ensures inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="experiments.Count == old(experiments.Count)" vb="experiments.Count = old(experiments.Count)">experiments.Count == old(experiments.Count)</ensures>
      <ensures inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures inheritedFrom="M:DaveSexton.Labs.IGUIConsoleLab.ExperimentCompletedAsync(System.Collections.Generic.IList{DaveSexton.Labs.IExperiment},System.Int32)" inheritedFromTypeName="IGUIConsoleLab" csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.PrepareAcquireInput(DaveSexton.Labs.InputAcquirer)">
      <requires csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.InputAcquired``1(DaveSexton.Labs.InputAcquirer{``0},``0)">
      <requires csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.PressAnyKeyToContinue">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.WaitForKey">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.UserInput(System.String,System.Object[])">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.UserInput">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.UserInputKeys(System.String,System.Object[])">
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.UserInputKey(System.String,System.Object[])">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.UserInputUrl(System.String,System.Object[])">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures csharp="result != (System.Uri)null" vb="result &lt;&gt; ((System.Uri)Nothing) ">result != (System.Uri)null</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.UserInputUrl(System.UriKind,System.String,System.Object[])">
      <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
      <requires csharp="!IsNullOrWhiteSpace(format)" vb="Not IsNullOrWhiteSpace(format)">!string.IsNullOrWhiteSpace(format)</requires>
      <requires csharp="args != null" vb="args &lt;&gt; Nothing">args != null</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
      <ensures csharp="result != (System.Uri)null" vb="result &lt;&gt; ((System.Uri)Nothing) ">result != (System.Uri)null</ensures>
      <ensures csharp="kind != (System.UriKind)1 || result.IsAbsoluteUri" vb="kind &lt;&gt; ((System.UriKind)1) OrElse result.IsAbsoluteUri">kind != (System.UriKind)1 || result.IsAbsoluteUri</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.KeyPressed(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Nullable{System.Char})">
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.KeyPressed(System.Char,System.Windows.Input.ModifierKeys,DaveSexton.Labs.InputAcquirer{System.ConsoleKeyInfo})">
      <requires csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.InputTextBox_KeyUp(System.Object,System.Windows.Input.KeyEventArgs)">
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="M:DaveSexton.Labs.WindowsConsoleLab.InputTextBox_TextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
      <ensures csharp="this.HasProxy == old(this.HasProxy)" vb="Me.HasProxy = old(Me.HasProxy)">this.HasProxy == old(this.HasProxy)</ensures>
      <ensures csharp="this.Proxy == old(this.Proxy)" vb="Me.Proxy = old(Me.Proxy)">this.Proxy == old(this.Proxy)</ensures>
    </member>
    <member name="P:DaveSexton.Labs.WindowsConsoleLab.StartButton">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsConsoleLab.InputTextBox">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsConsoleLab.BindingExperiments">
      <getter>
        <ensures csharp="result == default(System.Collections.Generic.IList&lt;DaveSexton.Labs.IExperiment&gt;) || result.IsReadOnly" vb="result = Nothing OrElse result.IsReadOnly">result == default(System.Collections.Generic.IList&lt;DaveSexton.Labs.IExperiment&gt;) || result.IsReadOnly</ensures>
      </getter>
    </member>
    <member name="P:DaveSexton.Labs.WindowsConsoleLab.Experiments">
      <getter>
        <requires csharp="this.HasProxy" vb="Me.HasProxy">this.HasProxy</requires>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures csharp="result == this.Proxy.Experiments" vb="result = Me.Proxy.Experiments">result == this.Proxy.Experiments</ensures>
      </getter>
    </member>
  </members>
</doc>