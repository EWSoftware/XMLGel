<?xml version="1.0" encoding="utf-8"?>
<topic id="e0e82bb5-8bde-4fd3-bf07-4420714a8d7c" revisionNumber="1">
  <developerConceptualDocument xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
    <introduction>
      <para>Guide to getting started with the dianostic and logging components.</para>
    </introduction>
    <section>
      <title>Capturing diagnostic information</title>
      <content>
        <para>1) Create a simple Silverlight Media Framework app. Follow
the <externalLink><linkText>instructions on CodePlex</linkText><linkUri>http://smf.codeplex.com/documentation</linkUri><linkTarget>_blank</linkTarget></externalLink>
for more information.</para>
        <para>2) Add the following references to your project:</para>
        <para>·&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;
Microsoft.SilverlightMediaFramework.Diagnostics</para>
        <para>·&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;
Microsoft.SilverlightMediaFramework.Monitoring</para>
        <para>·&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;
Microsoft.SilverlightMediaFramework.Logging</para>
        <para>Note: After doing this, diagnostic information will now be
captured and packaged into Log objects.</para>
        <para>3) Capture those logs and take a look at them by adding the
following code to main page:</para>
        <code language="none" title=" ">using&#xA0;System.Windows.Controls;
using&#xA0;Microsoft.SilverlightMediaFramework.Logging;
&#xA0;
namespace&#xA0;LocalDiagnostics
{
&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;partial&#xA0;class&#xA0;MainPage&#xA0;:&#xA0;UserControl
&#xA0;&#xA0;&#xA0;&#xA0;{
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;MainPage()
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;InitializeComponent();
&#xA0;
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;LoggingService.Current.LogReceived&#xA0;+=&#xA0;logger_LogReceived;
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}
&#xA0;
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;logger_LogReceived(object&#xA0;sender,&#xA0;LogReceivedEventArgs&#xA0;e)
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; System.Diagnostics.Debug.WriteLine(e.Log.ToString());
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}
&#xA0;&#xA0;&#xA0;&#xA0;}
}</code>
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para>That's all it takes to start capturing logs created by the
Silverlight Media Framework!</para>
      </content>
    </section>
    <section>
      <title>Threading Considerations</title>
      <!--h3-->
      <content>
        <para>To achieve optimal performance, logs are often created on
background threads. Therefore, if you tried to modify the UI from the
LogReceived event, you will eventually receive an UnauthorizedAccessException. Therefore,
to account for this, you will want to do something like the following:</para>
        <code language="none" title=" ">void&#xA0;logger_LogReceived(object&#xA0;sender,&#xA0;LogReceivedEventArgs&#xA0;e)
{
&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(Dispatcher.CheckAccess())
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DoSomethingWithLog(e.Log);
&#xA0;&#xA0;&#xA0;&#xA0;else
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Dispatcher.BeginInvoke(()&#xA0;=&gt;&#xA0;DoSomethingWithLog(e.Log));
}</code>
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para>
          <legacyItalic>(this will make sure DoSomethingWithLog is always called
on the main, UI thread).</legacyItalic>
        </para>
      </content>
    </section>
    <section>
      <title>Using the logs?</title>
      <!--h3-->
      <content>
        <para>Let's take this a step further and use these logs to do
something useful. The first thing to know is that there are many different
types of logs. All logs derive from the Log base class which contains a
dictionary of key value pairs. While you could go look up the property value directly in
the dictionary, a better way is to cast the log object to its derived type.</para>
        <para>For example, one of the more useful log types is
VideoQualitySnapshotLog. This object defines a number of additional properties
that internally tap into the dictionary in a strongly typed manner. Here's an
example of how you would watch for the VideoQualitySnapshotLog and use it to
see what the perceived bandwidth is. <legacyItalic>Note: PerceivedBandwidth is just one of
the many properties available on the VideoQualitySnapshotLog.</legacyItalic></para>
        <code language="none" title=" ">void&#xA0;DoSomethingWithLog(Log&#xA0;log)
{
&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(log&#xA0;is&#xA0;VideoQualitySnapshotLog)
&#xA0;&#xA0;&#xA0;&#xA0;{
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VideoQualitySnapshotLog&#xA0;qualityLog&#xA0;=&#xA0;(VideoQualitySnapshotLog)log;
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;kbps&#xA0;=&#xA0;qualityLog.PerceivedBandwidth.GetValueOrDefault(0)&#xA0;/&#xA0;1024;
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Bandwidth.Text&#xA0;=&#xA0;kbps.ToString()&#xA0;+&#xA0;"&#xA0;kbps";
&#xA0;&#xA0;&#xA0;&#xA0;}
}</code>
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para />
        <para>To see this code in action, take a look at the
Samples.LocalDiagnostics sample included with the Silverlight Media Framework. Please
refer to API Reference in the help file for a complete list of the log types supported and
what information is provided within each.</para>
      </content>
    </section>
    <relatedTopics />
  </developerConceptualDocument>
</topic>